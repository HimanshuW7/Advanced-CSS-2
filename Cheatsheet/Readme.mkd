# Markdown Cheatsheet for CSS Features

## [Cheatsheet Markdown](https://www.markdownguide.org/cheat-sheet/)

*Ctrl + shift + v* **For Preview*

1. *CSS Background:*

* background-color
* background-image
* background-repeat
* background-attachment
* background-position
* background (shorthand property)
* `background: red no-repeat center center/cover;`

For More **[Reference](https://www.w3schools.com/css/css_background.asp)**

1. *Font and Font Effects:*

* Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.

* Google have also enabled different font effects that you can use. First add effect=effectname to the Google API, then add a special class name to the element that is going to use the special effect. The class name always starts with font-effect- and ends with the effectname.

* `<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia&effect=fire">` `font-family: "Sofia", sans-serif;`

* For More effects **[Reference](https://www.w3schools.com/css/css_font_google.asp)**

3. *Text Properties:*

* The vertical-align property sets the vertical alignment of an element.

* The text-transform property is used to specify uppercase and lowercase or capitalize letters in a text.

* The text-indent property is used to specify the indentation of the first line of a text.

* The letter-spacing property is used to specify the space between the characters in a text.

* The line-height property is used to specify the space between lines.

* The word-spacing property is used to specify the space between the words in a text.

* The white-space property specifies how white-space inside an element is handled.

* The text-shadow property adds shadow to text.

* In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px) and blur (2px).

* `text-shadow: 2px 2px 2px red;`

* For More **[Reference](https://www.w3schools.com/css/css_text.asp)**

4. *CSS Outline:*

* The outline-width property specifies the width of the outline, and can have one of the following values:
thin (typically 1px)
medium (typically 3px)
thick (typically 5px)
A specific size (in px, pt, cm, em, etc)

* outline-style
* outline-color
* outline-width
* outline-offset

* `outline: 5px solid yellow;`

* The outline-offset property adds space between an outline and the edge/border of an element. The space between an element and its outline is transparent.

* `outline-offset: 15px;`

* For More **[Reference](https://www.w3schools.com/css/css_outline.asp)**

5. *Links:*

* In addition, links can be styled differently depending on what state they are in.
* The four links states are:
* a:link - a normal, unvisited link
* a:visited - a link the user has visited
* a:hover - a link when the user mouses over it
* a:active - a link the moment it is clicked

* ``` Some Properties:
      display: inline-block; /*We can add padding with it*/
      display: block; /*See all results*/
      display: inline; /*We can't add padding with it*/
  ```

* Mouse over the words to change the cursor.

> auto
> crosshair
> default
> e-resize
> help
> move
> n-resize
> ne-resize
> nw-resize
> pointer
> progress
> s-resize
> se-resize
> sw-resize
> text
> w-resize
> wait

* **Synatx:** `cursor:auto;`

For More **[Reference](https://www.w3schools.com/css/css_link.asp)**

6. *Lists:*

* The list-style-image property specifies an image as the list item marker.

* `list-style-type: lower-roman;`
* `list-style-type: decimal;`
* `list-style: alpha;`
* When using the shorthand property, the order of the property values are:

list-style-type (if a list-style-image is specified, the value of this property will be displayed if the image for some reason cannot be displayed)
list-style-position (specifies whether the list-item markers should appear inside or outside the content flow)
list-style-image (specifies an image as the list item marker)
If one of the property values above are missing, the default value for the missing property will be inserted, if any.

`list-style: circle inside url('img_marker.png');`

* `ul {
  list-style-image: url('sqpurple.gif');
}`

* For More **[Reference](https://www.w3schools.com/css/css_list.asp)**

7. *Tables:*

* The border-collapse property sets whether the table borders should be collapsed into a single border.

* For zebra-striped tables, use the **nth-child()** selector and add a background-color to all **even** (or **odd**) table rows.

* A responsive table will display a horizontal scroll bar if the screen is too small to display the full content.

* Add a container element (like `<div>`) with overflow-x:auto around the `<table>` element to make it responsive.

* For More **[Reference](https://www.w3schools.com/css/css_table.asp)**

8. *Display:*

* The display property is the most important CSS property for controlling layout.

* The display property specifies if/how an element is displayed.

* Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.

* **Block-level Elements:**

* A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).

* Examples of block-level elements:

* `<div>`
* `<h1> - <h6>`
* `<p>`
* `<form>`
* `<header>`
* `<footer>`
* `<section>`

* **Inline Elements:**

* An inline element does not start on a new line and only takes up as much width as necessary.

* `<span>`
* `<a>`
* `<img>`

* **Display: none;**

* display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them. Take a look at our last example on this page if you want to know how this can be achieved.

* The `<script>` element uses display: none; as default.

* **Hide an Element - display:none or visibility:hidden?**

* Hiding an element can be done by setting the display property to none. The element will be hidden, and the page will be displayed as if the element is not there.
* `visibility:hidden;` also hides an element.
* However, the element will still take up the same space as before. The element will be hidden, but still affect the layout.

* For More **[Reference](https://www.w3schools.com/css/css_display_visibility.asp)**

9. *Max-Width:*

* Setting the width of a block-level element will prevent it from stretching out to the edges of its container. Then, you can set the margins to auto, to horizontally center the element within its container. The element will take up the specified width, and the remaining space will be split equally between the two margins.

 **Note**: The problem with the `<div>` above occurs when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page.

* Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a site usable on small devices.

* Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a site usable on small devices.

* For More **[Reference](https://www.w3schools.com/css/css_max-width.asp)**

10. *Position:*

* **`position: sticky;`**

* An element with position: sticky; is positioned based on the user's scroll position.

A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like `position:fixed`).

* **Note:** Internet Explorer does not support sticky positioning. Safari requires a **-webkit- prefix** (see example below). You must also specify at least one of top, right, bottom or left for sticky positioning to work.

* `div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
  background-color: green;
  border: 2px solid #4CAF50;
}`

* **Overlapping Elements:**

* When elements are positioned, they can overlap other elements.

* The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).

* An element can have a positive or negative stack order.

* `img {
  position: absolute;
  left: 0px;
  top: 0px;
  z-index: -1;
}`

* For More **[Reference](https://www.w3schools.com/css/css_positioning.asp)**

11. *Overflow:*

* The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.

The overflow property has the following values:

**visible** - Default. The overflow is not clipped. The content renders outside the element's box. (**default**)
**hidden** - The overflow is clipped, and the rest of the content will be invisible.
**scroll** - The overflow is clipped, and a scrollbar is added to see the rest of the content.
**auto** - Similar to scroll, but it adds scrollbars only when necessary.

* **overflow-x and overflow-y**

* The overflow-x and overflow-y properties specifies whether to change the overflow of content just **horizontally** or **vertically** (or **both**):
overflow-x specifies what to do with the **left/right** edges of the content.
overflow-y specifies what to do with the **top/bottom** edges of the content.

* For More **[Reference](https://www.w3schools.com/css/css_overflow.asp)**

12. *Align:*

* **Center Vertically - Using line-height:**

* Another trick is to use the line-height property with a value that is equal to the height property.

``` *With Line-height:*
.center {
  line-height: 200px;
  height: 200px;
  border: 3px solid green;
  text-align: center;
}

/*If the text has multiple lines, add the following:*/

.center p {
  line-height: 1.5;
  display: inline-block;
  vertical-align: middle;
}
```

``` *With Posistion:*
.center p {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
```

``` *With Flex:*
.center p {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
```

* For More **[Reference](https://www.w3schools.com/css/css_align.asp)**

13. *Combinators:*

* A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator.

There are four different combinators in CSS:

* descendant selector **(space)**
* child selector **(>)**
* adjacent sibling selector **(+)**
* general sibling selector **(~)**

**Descendant Selector:**

The descendant selector matches all elements that are descendants of a specified element.

``` *Example:*
div p {
  background-color: yellow;
}
```

**Child Selector (>):**

The child selector selects all elements that are the children of a specified element.

``` *Example:*
div > p {
  background-color: yellow;
}
```

**Adjacent Sibling Selector (+):**

The adjacent sibling selector is used to select an element that is directly after another specific element.

Sibling elements must have the same parent element, and "adjacent" means "immediately following".

``` *Example:*
div + p {
  background-color: yellow;
}
```

**General Sibling Selector (~):**

The general sibling selector selects all elements that are siblings of a specified element.

``` *Example:*
div ~ p {
  background-color: yellow;
}
```

* For More **[Reference](https://www.w3schools.com/css/css_combinators.asp)**

14. *Psudeo Class:*

* **What are Pseudo-classes?**

A pseudo-class is used to define a special state of an element.

For example, it can be used to:

* Style an element when a user mouses over it.
* Style visited and unvisited links differently.
* Style an element when it gets focus.

``` *Syntax:*
selector:pseudo-class {
  property: value;
}
```

* **Anchor Pseudo-classes:**

``` *Exmaple:*
a:link {
  color: #FF0000;
}

/* visited link */
a:visited {
  color: #00FF00;
}

/* mouse over link */
a:hover {
  color: #FF00FF;
}

/* selected link */
a:active {
  color: #0000FF;
}
```

**Note:** `a:hover` MUST come after a:link and a:visited in the CSS definition in order to be effective! `a:active` MUST come after `a:hover` in the CSS definition in order to be effective! Pseudo-class names are not case-sensitive.

* **Pseudo-classes and CSS Classes:**

Pseudo-classes can be combined with CSS classes.

``` *Syntax:*
a.highlight:hover {
  color: #ff0000;
}
```

* **Hover on `<div>`:**

An example of using the :hover pseudo-class on a `<div>` element.

``` *Example:*
div:hover {
  background-color: blue;
}
```

* **Simple Tooltip Hover:**

Hover over a `<div>` element to show a `<p>` element *(like a tooltip).*

``` *Syntax:*
p {
  display: none;
  background-color: yellow;
  padding: 20px;
}

div:hover p {
  display: block;
}
```

* **CSS - The :first-child Pseudo-class:**

The `:first-child` pseudo-class matches a specified element that is the first child of another element.

* **Match the first `<p>` element**

``` *Example:
p:first-child {
  color: blue;
}
```

* **Match the first `<i>` element in all `<p>` elements:**

``` *Example:*
p i:first-child {
  color: blue;
}
```

* **Match all `<i>` elements in all first child `<p>` elements:**

``` *Exmaple:*
p:first-child i {
  color: blue;
}
```

* **The :lang Pseudo-class:**

The :lang pseudo-class allows you to define special rules for different languages.

`:lang` defines the quotation marks for `<q>` elements with lang="no".

``` *Exmaple:*
<html>
<head>
<style>
q:lang(no) {
  quotes: "~" "~";
}
</style>
</head>
<body>

<p>Some text <q lang="no">A quote in a paragraph</q> Some text.</p>

</body>
</html>
```

[Specific Reference]('https://www.w3schools.com/css/tryit.asp?filename=trycss_lang')

* **`:focus`:**

The background color of `<input>` elements that are in focus *(clicked or active).*

 ``` *Example:*
input:focus {
  background-color: lightblue;
}
 ```

* For More **[Reference](https://www.w3schools.com/css/css_pseudo_classes.asp)**

 15. *Pseudo-elements:*

* **What are Pseudo-Elements?**

A CSS pseudo-element is used to style specified parts of an element.

For example, it can be used to:

Style the first letter, or line, of an element
Insert content before, or after, the content of an element

``` *Syntax:*
selector::pseudo-element {
  property: value;
}
```

* **The `::first-line` Pseudo-element:**

The ::first-line pseudo-element is used to add a special style to the first line of a text.

``` *Exmaple:*
p::first-line {
  color: #ff0000;
  font-variant: small-caps;
}
```

**Note:** The `::first-line` pseudo-element can only be applied to block-level elements.

The following properties apply to the `::first-line` pseudo-element:

> font properties
> color properties
> background properties
> word-spacing
> letter-spacing
> text-decoration
> vertical-align
> text-transform
> line-height
> clear

**Notice the double colon notation -** `::first-line` versus `:first-line`

The double colon replaced the single-colon notation for pseudo-elements in CSS3. This was an attempt from W3C to distinguish between pseudo-classes and pseudo-elements.

The single-colon syntax was used for both pseudo-classes and pseudo-elements in CSS2 and CSS1.

For backward compatibility, the single-colon syntax is acceptable for CSS2 and CSS1 pseudo-elements.

* **The `::first-letter` Pseudo-element:**

The `::first-letter` pseudo-element is used to add a special style to the first letter of a text.

``` *Exmaple:*
p::first-letter {
  color: #ff0000;
  font-size: xx-large;
}
```

**Note:** The ::first-letter pseudo-element can only be applied to block-level elements.

The following properties apply to the ::first-letter pseudo- element:

> font properties
> color properties
> background properties
> margin properties
> padding properties
> border properties
> text-decoration
> vertical-align (only if "float" is "none")
> text-transform
> line-height
> float
> clear

* **Pseudo-elements and CSS Classes:**

Pseudo-elements can be combined with CSS classes.

``` *Example:*
p.intro::first-letter {
  color: #ff0000;
  font-size: 200%;
}
```

* **Multiple Pseudo-elements:**

Several pseudo-elements can also be combined.

In the following example, the first letter of a paragraph will be red, in an xx-large font size. The rest of the first line will be blue, and in small-caps. The rest of the paragraph will be the default font size and color.

``` *Example:*
p::first-letter {
  color: #ff0000;
  font-size: xx-large;
}

p::first-line {
  color: #0000ff;
  font-variant: small-caps;
}
```

* **CSS - The `::before` Pseudo-element:**

The `::before` pseudo-element can be used to insert some content before the content of an element.

``` *Exmaple:*
h1::before {
  content: url(smiley.gif);
}
```

* **CSS - The `::after` Pseudo-element:**

The `::after` pseudo-element can be used to insert some content after the content of an element.

``` *Exmaple:*
h1::after {
  content: url(smiley.gif);
}
```

* **CSS - The `::marker` Pseudo-element:**

The `::marker` pseudo-element selects the markers of list items.

``` *Exmaple:*
::marker {
  color: red;
  font-size: 23px;
}
```

* **CSS - The `::selection` Pseudo-element:**

The `::selection` pseudo-element matches the portion of an element that is selected by a user.

The following CSS properties can be applied to `::selection`: color, background, cursor, and outline.

``` *Example:
::selection {
  color: red;
  background: yellow;
}
```

* For More **[Reference](https://www.w3schools.com/css/css_pseudo_elements.asp)**

16. *Opacity/Transparency:*

* The opacity property specifies the opacity/transparency of an element.

* **Transparent Image:**
The opacity property can take a value from `0.0 - 1.0`. The lower value, the more transparent.

``` *Example:*
img {
  opacity: 0.5;
}
```

* For More **[Reference](https://www.w3schools.com/css/css_image_transparency.asp)**

17. *Dropdowns:*

* Create a hoverable dropdown with CSS.

* **Basic Dropdown:**

Create a dropdown box that appears when the user moves the mouse over an element.

``` *Exmaple:*
<style>
.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  padding: 12px 16px;
  z-index: 1;
}

.dropdown:hover .dropdown-content {
  display: block;
}
</style>

<div class="dropdown">
  <span>Mouse over me</span>
  <div class="dropdown-content">
    <p>Hello World!</p>
  </div>
</div>
```

* **Dropdown Menu:**

* Create a dropdown menu that allows the user to choose an option from a list.

``` *Exmaple:*
<style>
/* Style The Dropdown Button */
.dropbtn {
  background-color: #4CAF50;
  color: white;
  padding: 16px;
  font-size: 16px;
  border: none;
  cursor: pointer;
}

/* The container <div> - needed to position the dropdown content */
.dropdown {
  position: relative;
  display: inline-block;
}

/* Dropdown Content (Hidden by Default) */
.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

/* Links inside the dropdown */
.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

/* Change color of dropdown links on hover */
.dropdown-content a:hover {background-color: #f1f1f1}

/* Show the dropdown menu on hover */
.dropdown:hover .dropdown-content {
  display: block;
}

/* Change the background color of the dropdown button when the dropdown content is shown */
.dropdown:hover .dropbtn {
  background-color: #3e8e41;
}
</style>

<div class="dropdown">
  <button class="dropbtn">Dropdown</button>
  <div class="dropdown-content">
    <a href="#">Link 1</a>
    <a href="#">Link 2</a>
    <a href="#">Link 3</a>
  </div>
</div>
```

For More **[Reference]('https://www.w3schools.com/css/css_dropdowns.asp')**

18. *Attribute Selectors:*

* **Style HTML Elements With Specific Attributes:**

It is possible to style HTML elements that have specific attributes or attribute values.

* **CSS `[attribute]` Selector:**

The `[attribute]` selector is used to select elements with a specified attribute.

``` *The following example selects all <a> elements with a target attribute:*
a[target] {
  background-color: yellow;
}
```

* **CSS `[attribute="value"]` Selector:**

The `[attribute="value"]` selector is used to select elements with a specified attribute and value.

``` *The following example selects all <a> elements with a target="_blank" attribute:*
a[target="_blank"] {
  background-color: yellow;
}

```

* **CSS `[attribute~="value"]` Selector:**

The `[attribute~="value"]` selector is used to select elements with an attribute value containing a specified word.

``` *The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":*
[title~="flower"] {
  border: 5px solid yellow;
}
```

* **CSS `[attribute|="value"]` Selector:**

The `[attribute|="value"]` selector is used to select elements with the specified attribute starting with the specified value.

``` *The following example selects all elements with a class attribute value that begins with "top":*
[class|="top"] {
  background: yellow;
}
```

**Note:** The value has to be a whole word, either alone, like `class="top"`, or followed by a hyphen`( - )`, like `class="top-text"`!

* **CSS `[attribute^="value"]` Selector:**

The `[attribute^="value"]` selector is used to select elements whose attribute value begins with a specified value.

``` *The following example selects all elements with a class attribute value that begins with "top":*
[class^="top"] {
  background: yellow;
}
```

**Note:** The value does not have to be a whole word!

* **CSS `[attribute$="value"]` Selector:**

The `[attribute$="value"]` selector is used to select elements whose attribute value ends with a specified value.

``` *The following example selects all elements with a class attribute value that ends with "test":*
[class$="test"] {
  background: yellow;
}
```

**Note:** The value does not have to be a whole word!

* **CSS `[attribute*="value"]` Selector:**

The `[attribute*="value"]` selector is used to select elements whose attribute value contains a specified value.

``` *The following example selects all elements with a class attribute value that contains "te":*
[class*="te"] {
  background: yellow;
}
```

**Note:** The value does not have to be a whole word!

For More **[Reference]('https://www.w3schools.com/css/css_attribute_selectors.asp')**

19. *Counters:*

* CSS counters are `"variables"` maintained by CSS whose values can be incremented by CSS rules `(to track how many times they are used)`. Counters let you adjust the appearance of content based on its placement in the document.

* **Automatic Numbering With Counters:**

CSS counters are like "variables". The variable values can be incremented by CSS rules (which will track how many times they are used).

To work with CSS counters we will use the following properties:

> `counter-reset` - Creates or resets a counter
> `counter-increment` - Increments a counter value
> `content` - Inserts generated content
> `counter()` or `counters()` function - Adds the value of a counter to an element

To use a CSS counter, it must first be created with counter-reset.

``` *The following example creates a counter for the page (in the body selector), then increments the counter value for each <h2> element and adds "Section <value of the counter>:" to the beginning of each <h2> element:*

body {
  counter-reset: section;
}

h2::before {
  counter-increment: section;
  content: "Section " counter(section) ": ";
}
```

* **Nesting Counters:**
The following example creates one counter for the page `(section)` and one counter for each `<h1>` element `(subsection)`. The `"section"` counter will be counted for each `<h1>` element with "Section `<value of the section counter>."`, and the "subsection" counter will be counted for each `<h2>` element with `"<value of the section counter>.<value of the subsection counter>"`:

``` *Exmaple:*

body {
  counter-reset: section;
}

h1 {
  counter-reset: subsection;
}

h1::before {
  counter-increment: section;
  content: "Section " counter(section) ". ";
}

h2::before {
  counter-increment: subsection;
  content: counter(section) "." counter(subsection) " ";
}
```

* A counter can also be useful to make outlined lists because a new instance of a counter is automatically created in child elements. Here we use the `counters()` function to insert a string between different levels of nested counters:

``` *Example:*

ol {
  counter-reset: section;
  list-style-type: none;
}

li::before {
  counter-increment: section;
  content: counters(section,".") " ";
}
```

For More **[Reference](https://www.w3schools.com/css/css_counters.asp)**

20. *Website Layout:*

* A website is often divided into headers, menus, content and a footer.

* **Header:**

A header is usually located at the top of the website `(or right below a top navigation menu)`. It often contains a logo or the website name:

``` Example:

.header {
  background-color: #F1F1F1;
  text-align: center;
  padding: 20px;
}
```

* **Navigation Bar:**

A navigation bar contains a list of links to help visitors navigating through your website:

``` Example:

/* The navbar container */
.topnav {
  overflow: hidden;
  background-color: #333;
}

/* Navbar links */
.topnav a {
  float: left;
  display: block;
  color: #f2f2f2;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}

/* Links - change color on hover */
.topnav a:hover {
  background-color: #ddd;
  color: black;
}
```

* **Content:**

The layout in this section, often depends on the target users. The most common layout is one (or combining them) of the following:

> 1-column (often used for mobile browsers)
> 2-column (often used for tablets and laptops)
> 3-column layout (only used for desktops)

We will create a 3-column layout, and change it to a 1-column layout on smaller screens:

``` Exmaple:

/* Create three equal columns that floats next to each other */
.column {
  float: left;
  width: 33.33%;
}

/* Clear floats after the columns */
.row:after {
  content: "";
  display: table;
  clear: both;
}

/* Responsive layout - makes the three columns stack on top of each other instead of next to each other on smaller screens (600px wide or less) */
@media screen and (max-width: 600px) {
  .column {
    width: 100%;
  }
}
```

* **Footer:**

The footer is placed at the bottom of your page. It often contains information like copyright and contact info:

``` Example:

.footer {
  background-color: #F1F1F1;
  text-align: center;
  padding: 10px;
}
```

For More **[Reference](https://www.w3schools.com/css/css_website_layout.asp)**

21. *Units:*

* **CSS Units:**

CSS has several different units for expressing a length.

Many CSS properties take `"length"` `values`, such as `width`, `margin`, `padding`, `font-size`, etc.

Length is a number followed by a `length unit`, such as `10px`, `2em`, etc.

``` Exmaple:

h1 {
  font-size: 60px;
}

p {
  font-size: 25px;
  line-height: 50px;
}

```

**Note:** A whitespace cannot appear between the number and the unit. However, if the value is `0`, the unit can be omitted.

For some CSS properties, negative lengths are allowed.

There are two types of length units: `absolute and relative.`

* **Absolute Lengths:**

The absolute length units are fixed and a length expressed in any of these will appear as exactly that size.

Absolute length units are not recommended for use on screen, because screen sizes vary so much. However, they can be used if the output medium is known, such as for print layout.

| Unit | Description                  |
| ---- | ---------------------------- |
| cm   | centimeter                   |
| mm   | millimeter                   |
| in   | inches (1in = 96px = 2.54cm) |
| px * | pixels (1px = 1/96th of 1in) |
| pt   | points (1pt = 1/72 of 1in)   |
| pc   | picas (1pc = 12 pt)          |

* Pixels `(px)` are relative to the viewing device. For low-dpi devices, 1px is one device pixel `(dot)` of the display. For printers and high resolution screens 1px implies multiple device pixels.

* **Relative Lengths:**

Relative length units specify a length relative to another length property. Relative length units scales better between different rendering mediums.

| Unit | Description                                                                               |
| ---- | ----------------------------------------------------------------------------------------- |
| em   | Relative to the font-size of the element (2em means 2 times the size of the current font) |
| ex   | Relative to the x-height of the current font (rarely used)                                |
| ch   | Relative to width of the "0" (zero)                                                       |
| rem  | Relative to font-size of the root element                                                 |
| vw   | Relative to 1% of the width of the viewport*                                              |
| vh   | Relative to 1% of the height of the viewport*                                             |
| vmin | Relative to 1% of viewport's* smaller dimension                                           |
| vmax | Relative to 1% of viewport's* larger dimension                                            |
| %    | Relative to the parent element                                                            |

For More  **[Reference](https://www.w3schools.com/css/css_units.asp)**

22. *CSS Specificity:*

* **What is Specificity?**

If there are two or more conflicting CSS rules that point to the same element, the browser follows some rules to determine which one is most specific and therefore wins out.

Think of specificity as a score/rank that determines which style declarations are ultimately applied to an element.

The universal selector `(*)` has low specificity, while ID selectors are highly specific!

**Note:** Specificity is a common reason why your CSS-rules don't apply to some elements, although you think they should.

* **Specificity Hierarchy:**

Every selector has its place in the specificity hierarchy. There are four categories which define the specificity level of a selector:

`Inline styles` - An inline style is attached directly to the element to be styled. Example: `<h1 style="color: #ffffff;">`.

`IDs` - An ID is a unique identifier for the page elements, such as #navbar.

`Classes, attributes and pseudo-classes` - This category includes .classes, `[attributes]` and pseudo-classes such as :hover, :focus etc.

`Elements and pseudo-elements` - This category includes element names and pseudo-elements, such as h1, div, :before and :after.

* **How to Calculate Specificity?**

Memorize how to calculate specificity!

Start at 0, add 1000 for style attribute, add 100 for each ID, add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element.

Consider these three code fragments:

``` *Example:*

A: h1
B: #content h1
C: <div id="content"><h1 style="color: #ffffff">Heading</h1></div>

```

The specificity of A is 1 `(one element)`
The specificity of B is 101 `(one ID reference and one element)`
The specificity of C is 1000 `(inline styling)`

Since 1 < 101 < 1000, the third rule `(C)` has a greater level of specificity, and therefore will be applied.

* **Specificity Rules:**

**Equal specificity: the latest rule counts** - If the same rule is written twice into the external style sheet, then the lower rule in the style sheet is closer to the element to be styled, and therefore will be applied:

``` *Example:*

h1 {background-color: yellow;}
h1 {background-color: red;}

```

*the latter rule is always applied.*

---

* **ID selectors have a higher specificity than attribute selectors** - Look at the following three code lines:

``` *Example:*

div#a {background-color: green;}
#a {background-color: yellow;}
div[id=a] {background-color: blue;}

```

*the first rule is more specific than the other two, and will be applied.*

---

* **Contextual selectors are more specific than a single element selector** - The embedded style sheet is closer to the element to be styled. So in the following situation

``` *Example:*

From external CSS file:
#content h1 {background-color: red;}

In HTML file:
<style>
#content h1 {
  background-color: yellow;
}
</style>

```

*the latter rule will be applied.*

---

* **A class selector beats any number of element selectors** - a class selector such as .intro beats h1, p, div, etc:

``` *Example:*

.intro {background-color: yellow;}
h1 {background-color: red;}

```

**The universal selector and inherited values have a specificity of 0** - *`*`, body `*` and similar have a zero specificity. Inherited values also have a specificity of 0.*

---

23. *CSS Border Images:*

* **CSS Border Images:**

With the CSS `border-image` property, you can set an image to be used as the border around an element.

* *CSS `border-image` Property:*

The CSS `border-image` property allows you to specify an image to be used instead of the normal border around an element.

The property has three parts:

> The image to use as the border
> Where to slice the image
> Define whether the middle sections should be repeated or stretched

We will use the following image `(called "border.png")`:

![border.png](https://demo.tutorialzine.com/2013/10/css3-features-you-can-finally-use/assets/img/border.png)

The `border-image` property takes the image and slices it into nine sections, like a tic-tac-toe board. It then places the corners at the corners, and the middle sections are repeated or stretched as you specify.

**Note:** For `border-image` to work, the element also needs the `border` property set!

Here, the middle sections of the image are repeated to create the border:

``` *Here is the code:*

#borderimg {
  border: 10px solid transparent;
  padding: 15px;
  border-image: url(border.png) 30 round; /* space, stretch, fill, repeat */
}

```

**Tip:** The `border-image` property is actually a shorthand property for the `border-image-source`, `border-image-slice`, `border-image-width`, `border-image-outset` and `border-image-repeat` properties.

| Border Property     | Description                                                                       |
| ------------------- | --------------------------------------------------------------------------------- |
| border-image        | A shorthand property for setting all the `border-image-*` properties              |
| border-image-source | Specifies the path to the image to be used as a border                            |
| border-image-slice  | Specifies how to slice the border image                                           |
| border-image-width  | Specifies the widths of the border image                                          |
| border-image-outset | Specifies the amount by which the border image area extends beyond the border box |
| border-image-repeat | Specifies whether the border image should be repeated, rounded or stretched       |

For More **[Reference]('https://www.w3schools.com/css/css3_border_images.asp')**

24. *Background:*

* **CSS Background Size:**

The CSS `background-size` property allows you to specify the size of background images.

The size can be specified in lengths, percentages, or by using one of the two keywords: `contain` or `cover`.

The following example resizes a background image to much smaller than the original image `(using pixels)`:

``` *Example:*

#div1 {
  background: url(img_flower.jpg);
  background-size: 100px 80px;
  background-repeat: no-repeat;
}

```

The two other possible values for `background-size` are `contain` and `cover`.

The `contain` keyword scales the background image to be as large as possible (but both its width and its height must fit inside the content area). As such, depending on the proportions of the background image and the background positioning area, there may be some areas of the background which are not covered by the background image.

The `cover` keyword scales the background image so that the content area is completely covered by the background image (both its width and height are equal to or exceed the content area). As such, some parts of the background image may not be visible in the background positioning area.

The following example illustrates the use of `contain` and `cover`:

``` *Exmaple:*

#div1 {
  background: url(img_flower.jpg);
  background-size: contain;
  background-repeat: no-repeat;
}

#div2 {
  background: url(img_flower.jpg);
  background-size: cover;
  background-repeat: no-repeat;
}

```

* **CSS background-origin Property:**

The CSS `background-origin` property specifies where the background image is positioned.

The property takes three different values:

> `border-box` - the background image starts from the upper left corner of the border
> `padding-box` - `(default)` the background image starts from the upper left corner of the padding edge
> `content-box` - the background image starts from the upper left corner of the content

The following example illustrates the `background-origin` property:

``` *Exmaple:*

#example1 {
  border: 10px solid black;
  padding: 35px;
  background: url(img_flwr.gif);
  background-repeat: no-repeat;
  background-origin: content-box;
}

```

* **CSS background-clip Property:**

The CSS `background-clip` property specifies the painting area of the background.

The property takes three different values:

> `border-box` - `(default)` the background is painted to the outside edge of the border
> `padding-box` - the background is painted to the outside edge of the padding
> `content-box` - the background is painted within the content box

The following example illustrates the background-clip property:

``` *Example:*

#example1 {
  border: 10px dotted black;
  padding: 35px;
  background: yellow;
  background-clip: content-box;
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_backgrounds.asp')**

25. **CSS Gradients:**

* `CSS gradients` let you display smooth transitions between two or more specified colors.

* CSS defines two types of gradients:

> `Linear Gradients` (goes down/up/left/right/diagonally)
> `Radial Gradients` (defined by their center)

---

* **CSS Linear Gradients:**

To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.

`Syntax:`

`background-image: linear-gradient(direction, color-stop1, color-stop2, ...);`

**`Direction - Top to Bottom (this is default):`**

The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow:

``` *Example:*

#grad {
  background-image: linear-gradient(red, yellow);
}

```

* **`Direction - Left to Right:`**

The following example shows a linear gradient that starts from the left. It starts red, transitioning to yellow:

``` *Example:*

#grad {
  background-image: linear-gradient(to right, red, yellow);
}

```

* **`Direction - Diagonal:`**

You can make a gradient diagonally by specifying both the horizontal and vertical starting positions.

The following example shows a linear gradient that starts at top left (and goes to bottom right). It starts red, transitioning to yellow:

``` *Example:*

#grad {
  background-image: linear-gradient(to bottom right, red, yellow);
}

```

---

* **Using Angles:**

If you want more control over the direction of the gradient, you can define an angle, instead of the predefined directions (to bottom, to top, to right, to left, to bottom right, etc.). A value of 0deg is equivalent to "to top". A value of 90deg is equivalent to "to right". A value of 180deg is equivalent to "to bottom".

`Syntax:`

`background-image: linear-gradient(angle, color-stop1, color-stop2);`

The following example shows how to use angles on linear gradients:

``` *Example:*

#grad {
  background-image: linear-gradient(180deg, red, yellow);
}

```

* **Using Multiple Color Stops:**

The following example shows a linear gradient (from top to bottom) with multiple color stops:

``` *Example:*

#grad {
  background-image: linear-gradient(red, yellow, green);
}

```

* **Rainbow Background:**

The following example shows how to create a linear gradient (from left to right) with the color of the rainbow and some text:

``` *Example:*

#grad {
  background-image: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);
}

```

* **Using Transparency:**

CSS gradients also support transparency, which can be used to create fading effects.

To add transparency, we use the rgba() function to define the color stops. The last parameter in the rgba() function can be a value from 0 to 1, and it defines the transparency of the color: 0 indicates full transparency, 1 indicates full color (no transparency).

The following example shows a linear gradient that starts from the left. It starts fully transparent, transitioning to full color red:

``` *Exmaple:*

#grad {
  background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));
}

```

* **Repeating a linear-gradient:**

The repeating-linear-gradient() function is used to repeat linear gradients:

``` *Example:*

A repeating linear gradient:

#grad {
  background-image: repeating-linear-gradient(red, yellow 10%, green 20%);
}

```

* **CSS Radial Gradients:**

A radial gradient is defined by its center.

To create a radial gradient you must also define at least two color stops.

`Syntax:`

`background-image: radial-gradient(shape size at position, start-color, ..., last-color);`

By default, shape is ellipse, size is farthest-corner, and position is center.

* **`Radial Gradient - Evenly Spaced Color Stops (this is default)`**

The following example shows a radial gradient with evenly spaced color stops:

``` *Example:

#grad {
  background-image: radial-gradient(red, yellow, green);
}

```

* **`Radial Gradient - Differently Spaced Color Stops`:**

The following example shows a radial gradient with differently spaced color stops:

``` *Example:

#grad {
  background-image: radial-gradient(red 5%, yellow 15%, green 60%);
}

```

* **Set Shape:**

The shape parameter defines the shape. It can take the value circle or ellipse. The default value is ellipse.

The following example shows a radial gradient with the shape of a circle:

``` *Example:*

#grad {
  background-image: radial-gradient(circle, red, yellow, green);
}

```

* **Use of Different Size Keywords:**

The size parameter defines the size of the gradient. It can take four values:

> closest-side
> farthest-side
> closest-corner
> farthest-corner

``` *Example*

A radial gradient with different size keywords:

#grad1 {
  background-image: radial-gradient(closest-side at 60% 55%, red, yellow, black);
}

#grad2 {
  background-image: radial-gradient(farthest-side at 60% 55%, red, yellow, black);
}

```

* **Repeating a radial-gradient:**

The repeating-radial-gradient() function is used to repeat radial gradients:

``` *Example:*

A repeating radial gradient:

#grad {
  background-image: repeating-radial-gradient(red, yellow 10%, green 15%);
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_gradients.asp')**

26. *Shadow Effects:*

* With CSS you can add shadow to text and to elements.

In these chapters you will learn about the following properties:

> `text-shadow`
> `box-shadow`

* **CSS Text Shadow:**

The CSS text-shadow property applies shadow to text.

In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px):

``` *Example:*

h1 {
  text-shadow: 2px 2px;
}

```

* **Next, add a color to the shadow:**

``` *Example:*

h1 {
  text-shadow: 2px 2px red;
}

```

* **Then, add a blur effect to the shadow:**

``` *Example:*

h1 {
  text-shadow: 2px 2px 5px red;
}

```

* **The following example shows a white text with black shadow:**

``` *Example:*

h1 {
  color: white;
  text-shadow: 2px 2px 4px #000000;
}

```

* **The following example shows a red neon glow shadow:**

``` *Example:**

h1 {
  text-shadow: 0 0 3px #FF0000;
}

```

* **Multiple Shadows:**

To add more than one shadow to the text, you can add a comma-separated list of shadows.

The following example shows a red and blue neon glow shadow:

``` *Example:*

h1 {
  text-shadow: 0 0 3px #FF0000, 0 0 5px #0000FF;
}

```

* **The following example shows a white text with black, blue, and darkblue shadow:**

``` *Example:*

h1 {
  color: white;
  text-shadow: 1px 1px 2px black, 0 0 25px blue, 0 0 5px darkblue;
}

```

* **You can also use the text-shadow property to create a plain border around some text (without shadows):**

``` *Example:*

h1 {
  color: yellow;
  text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black;
}

```

---

* **CSS box-shadow Property:**

The CSS box-shadow property applies shadow to elements.

In its simplest use, you only specify the horizontal shadow and the vertical shadow:

``` *Example:*

div {
  box-shadow: 10px 10px;
}

```

* **Next, add a color to the shadow:**

``` *Example:*

div {
  box-shadow: 10px 10px grey;
}

```

* **Next, add a blur effect to the shadow:**

``` *Example:*

div {
  box-shadow: 10px 10px 5px grey;
}

```

* **Cards:**

You can also use the box-shadow property to create paper-like cards.

``` *Example:*

div.card {
  width: 250px;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  text-align: center;
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_shadows_box.asp')**

27. *CSS Text Effects:*

* **In this chapter you will learn about the following properties:**

> text-overflow
> word-wrap
> word-break
> writing-mode

---

* **CSS Overflow:**

CSS Text Overflow
The CSS text-overflow property specifies how overflowed content that is not displayed should be signaled to the user.

> It can be clipped:

`This is some long text that will not fit in the box`

> or it can be rendered as an ellipsis (...):

`This is some long text that will not fit in the box`

`The CSS code is as follows:`

``` *Example:*

p.test1 {
  white-space: nowrap;
  width: 200px;
  border: 1px solid #000000;
  overflow: hidden;
  text-overflow: clip;
}

p.test2 {
  white-space: nowrap;
  width: 200px;
  border: 1px solid #000000;
  overflow: hidden;
  text-overflow: ellipsis;
}

```

* **The following example shows how you can display the overflowed content when hovering over the element:**

``` *Example:*

div.test:hover {
  overflow: visible;
}

```

---

* **CSS Word Wrapping:**

The CSS `word-wrap` property allows long words to be able to be broken and wrap onto the next line.

> If a word is too long to fit within an area, it expands outside:

`This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.`

> The word-wrap property allows you to force the text to wrap - even if it means splitting it in the middle of a word:

`This paragraph contains a very long word: thisisaveryveryveryveryveryverylongword. The long word will break and wrap to the next line.`

``` *Example:**

Allow long words to be able to be broken and wrap onto the next line:

p {
  word-wrap: break-word;
}

```

---

* **CSS Word Breaking:**

The CSS `word-break` property specifies line breaking rules.

`This paragraph contains some text. This line will-break-at-hyphens.`

`This paragraph contains some text. The lines will break at any character.`

``` *Example:*

p.test1 {
  word-break: keep-all;
}

p.test2 {
  word-break: break-all;
}

```

---

* **CSS Writing Mode:**

The CSS `writing-mode` property specifies whether lines of text are laid out horizontally or vertically.

Some text with a span element with a `vertical-rl` writing-mode.

The following example shows some different writing modes:

``` *Example:*

p.test1 {
  writing-mode: horizontal-tb;
}

span.test2 {
  writing-mode: vertical-rl;
}

p.test2 {
  writing-mode: vertical-rl;
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_text_effects.asp')**

---

28. *Web Fonts:*

* **The CSS @font-face Rule:**

Web fonts allow Web designers to use fonts that are not installed on the user's computer.

When you have found/bought the font you wish to use, just include the font file on your web server, and it will be automatically downloaded to the user when needed.

Your "own" fonts are defined within the CSS `@font-face` rule.

---

* **Different Font Formats:**

`TrueType Fonts (TTF)`

TrueType is a font standard developed in the late 1980s, by Apple and Microsoft. TrueType is the most common font format for both the Mac OS and Microsoft Windows operating systems.

`OpenType Fonts (OTF)`

OpenType is a format for scalable computer fonts. It was built on TrueType, and is a registered trademark of Microsoft. OpenType fonts are used commonly today on the major computer platforms.

`The Web Open Font Format (WOFF)`

WOFF is a font format for use in web pages. It was developed in 2009, and is now a W3C Recommendation. WOFF is essentially OpenType or TrueType with compression and additional metadata. The goal is to support font distribution from a server to a client over a network with bandwidth constraints.

`The Web Open Font Format (WOFF 2.0)`

TrueType/OpenType font that provides better compression than WOFF 1.0.

`SVG Fonts/Shapes`

SVG fonts allow SVG to be used as glyphs when displaying text. The SVG 1.1 specification define a font module that allows the creation of fonts within an SVG document. You can also apply CSS to SVG documents, and the @font-face rule can be applied to text in SVG documents.

`Embedded OpenType Fonts (EOT)`

EOT fonts are a compact form of OpenType fonts designed by Microsoft for use as embedded fonts on web pages.

---

* **Using The Font You Want:**

In the `@font-face` rule; first define a name for the font (e.g. myFirstFont) and then point to the font file.

`**Tip:** Always use lowercase letters for the font URL. Uppercase letters can give unexpected results in IE.`

To use the font for an HTML element, refer to the name of the font (myFirstFont) through the `font-family` property:

``` *Example:*

@font-face {
  font-family: myFirstFont;
  src: url(sansation_light.woff);
}

div {
  font-family: myFirstFont;
}

```

---

* **Using Bold Text:**
You must add another `@font-face` rule containing descriptors for bold text:

``` *Example:*

@font-face {
  font-family: myFirstFont;
  src: url(sansation_bold.woff);
  font-weight: bold;
}

```

The file "sansation_bold.woff" is another font file, that contains the bold characters for the Sansation font.

Browsers will use this whenever a piece of text with the font-family "myFirstFont" should render as bold.

This way you can have many `@font-face` rules for the same font.

For More **[Reference]('https://www.w3schools.com/css/css3_fonts.asp')**

29. *CSS 2D Transforms:*

* CSS transforms allow you to move, rotate, scale, and skew elements.

In this chapter you will learn about the following CSS property:

> transform

* **CSS 2D Transforms Methods:**

With the CSS transform property you can use the following 2D transformation methods:

> translate()
> rotate()
> scaleX()
> scaleY()
> scale()
> skewX()
> skewY()
> skew()
> matrix()

* **The translate() Method:**

The `translate()` method moves an element from its current position `(according to the parameters given for the X-axis and the Y-axis)`.

The following example moves the `<div>` element 50 pixels to the right, and 100 pixels down from its current position:

``` *Example:*

div {
  transform: translate(50px, 100px);
}

```

* **The rotate() Method:**

The rotate`()` method rotates an element clockwise or counter-clockwise according to a given degree.

The following example rotates the `<div>` element clockwise with 20 degrees:

``` *Example:*

div {
  transform: rotate(20deg);
}

```

* **Using negative values will rotate the element counter-clockwise.**

The following example rotates the `<div>` element counter-clockwise with 20 degrees:

``` *Example:*

div {
  transform: rotate(-20deg);
}

```

---

* **The scale() Method:**

The `scale()` method increases or decreases the size of an element (according to the parameters given for the width and height).

The following example increases the `<div>` element to be two times of its original width, and three times of its original height:

``` *Example:*

div {
  transform: scale(2, 3);
}

```

* **The following example decreases the `<div>` element to be half of its original width and height:**

``` *Example:*

div {
  transform: scale(0.5, 0.5);
}

```

---

* **The scaleX() Method:**

The `scaleX()` method increases or decreases the width of an element.

The following example increases the `<div>` element to be two times of its original width:

``` *Example:*

div {
  transform: scaleX(2);
}

```

* **The following example decreases the `<div>` element to be half of its original width:**

``` *Example:*

div {
  transform: scaleX(0.5);
}

```

---

* **The scaleY() Method:**

The `scaleY()` method increases or decreases the height of an element.

The following example increases the `<div>` element to be three times of its original height:

``` *Example:*

div {
  transform: scaleY(3);
}

```

* **The following example decreases the `<div>` element to be half of its original height:**

``` *Example:*

div {
  transform: scaleY(0.5);
}

```

---

* **The skewX() Method:**

The `skewX()` method skews an element along the X-axis by the given angle.

The following example skews the `<div>` element 20 degrees along the X-axis:

``` *Example:*

div {
  transform: skewX(20deg);
}

```

---

* **The skewY() Method:**

The `skewY()` method skews an element along the Y-axis by the given angle.

The following example skews the `<div>` element 20 degrees along the Y-axis:

``` *Example:*

div {
  transform: skewY(20deg);
}

```

---

* **The skew() Method:**

The `skew()` method skews an element along the X and Y-axis by the given angles.

The following example skews the `<div>` element 20 degrees along the X-axis, and 10 degrees along the Y-axis:

``` *Example:*

div {
  transform: skew(20deg, 10deg);
}

```

If the second parameter is not specified, it has a zero value. So, the following example skews the `<div>` element 20 degrees along the X-axis:

``` *Example:*

div {
  transform: skew(20deg);
}

```

---

* **The matrix() Method:**

The `matrix()` method combines all the 2D transform methods into one.

The `matrix()` method take six parameters, containing mathematic functions, which allows you to rotate, scale, move (translate), and skew elements.

The parameters are as follow: matrix`(scaleX(),skewY(),skewX(),scaleY(),translateX(),translateY())`

``` *Example:*

div {
  transform: matrix(1, -0.3, 0, 1, 0, 0);
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_2dtransforms.asp')**

---

30. **CSS 3D Transforms:**

* CSS also supports 3D transformations.

* In this chapter you will learn about the following CSS property:

> transform

* **CSS 3D Transforms Methods* **
With the CSS transform property you can use the following 3D transformation methods:

> rotateX()
> rotateY()
> rotateZ()

---

* **The rotateX() Method:**

The `rotateX()` method rotates an element around its X-axis at a given degree:

``` *Example:*

#myDiv {
  transform: rotateX(150deg);
}

```

---

* **The rotateY() Method:**

The `rotateY()` method rotates an element around its Y-axis at a given degree:

``` *Example:*

#myDiv {
  transform: rotateY(150deg);
}

```

---

* **The rotateZ() Method:**

The `rotateZ()` method rotates an element around its Z-axis at a given degree:

``` *Example:*

#myDiv {
  transform: rotateZ(90deg);
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_3dtransforms.asp')**

---

31. *CSS Transitions:*

* CSS transitions allows you to change property values smoothly, over a given duration.

In this chapter you will learn about the following properties:

> transition
> transition-delay
> transition-duration
> transition-property
> transition-timing-function

* **How to Use CSS Transitions?**

* To create a transition effect, you must specify two things:

> the CSS property you want to add an effect to
> the duration of the effect

**Note:** If the duration part is not specified, the transition will have no effect, because the default value is 0.

The following example shows a 100px * 100px red `<div>` element. The `<div>` element has also specified a transition effect for the width property, with a duration of 2 seconds:

``` *Example:*

div {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 2s;
}

```

* The transition effect will start when the specified CSS property `(width)` changes value.

Now, let us specify a new value for the width property when a user mouses over the `<div>` element:

``` *Example:*

div:hover {
  width: 300px;
}

```

`Notice that when the cursor mouses out of the element, it will gradually change back to its original style.`

---

* **Change Several Property Values:**

The following example adds a transition effect for both the width and height property, with a duration of 2 seconds for the width and 4 seconds for the height:

```*Example:*

div {
  transition: width 2s, height 4s;
}

```

---

* **Specify the Speed Curve of the Transition:**

The `transition-timing-function` property specifies the speed curve of the transition effect.

The transition-timing-function property can have the following values:

> `ease` - specifies a transition effect with a slow start, then fast, then end slowly (this is default)
> `linear` - specifies a transition effect with the same speed from start to end
> `ease-in` - specifies a transition effect with a slow start
> `ease-out` - specifies a transition effect with a slow end
> `ease-in-out` - specifies a transition effect with a slow start and end
> `cubic-bezier(n,n,n,n)` - lets you define your own values in a cubic-bezier function

The following example shows some of the different speed curves that can be used:

``` *Example:*

#div1 {transition-timing-function: linear;}
#div2 {transition-timing-function: ease;}
#div3 {transition-timing-function: ease-in;}
#div4 {transition-timing-function: ease-out;}
#div5 {transition-timing-function: ease-in-out;}

```

---

* **Delay the Transition Effect**

The `transition-delay` property specifies a delay (in seconds) for the transition effect.

The following example has a 1 second delay before starting:

``` *Example:*

div {
  transition-delay: 1s;
}

```

---

* **Transition + Transformation**

The following example adds a transition effect to the transformation:

``` *Example:*

div {
  transition: width 2s, height 2s, transform 2s;
}

```

---

* **More Transition Examples**

The CSS transition properties can be specified one by one, like this:

``` *Example:*

div {
  transition-property: width;
  transition-duration: 2s;
  transition-timing-function: linear;
  transition-delay: 1s;
}

```

or by using the shorthand property transition:

``` *Example:**

div {
  transition: width 2s linear 1s;
}

```

---

For More **[Reference]('https://www.w3schools.com/css/css3_transitions.asp')**

32. *Animations:*

* CSS allows animation of HTML elements without using JavaScript or Flash!

In this chapter you will learn about the following properties:

> @keyframes
> animation-name
> animation-duration
> animation-delay
> animation-iteration-count
> animation-direction
> animation-timing-function
> animation-fill-mode
> animation

* **What are CSS Animations?**

An animation lets an element gradually change from one style to another.

You can change as many CSS properties you want, as many times as you want.

To use CSS animation, you must first specify some keyframes for the animation.

Keyframes hold what styles the element will have at certain times.

---

* **0The @keyframes Rule:**

When you specify CSS styles inside the `@keyframes` rule, the animation will gradually change from the current style to the new style at certain times.

To get an animation to work, you must bind the animation to an element.

The following example binds the "example" animation to the `<div>` element. The animation will last for 4 seconds, and it will gradually change the background-color of the `<div>` element from "red" to "yellow":

``` *Example:*

/* The animation code */
@keyframes example {
  from {background-color: red;}
  to {background-color: yellow;}
}

/* The element to apply the animation to */
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
}

```

**Note:** The `animation-duration` property defines how long an animation should take to complete. If the `animation-duration` property is not specified, no animation will occur, because the default value is 0s (0 seconds).

In the example above we have specified when the style will change by using the keywords "from" and "to" (which represents 0% (start) and 100% (complete)).

It is also possible to use percent. By using percent, you can add as many style changes as you like.

The following example will change the background-color of the `<div>` element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:

``` *Example:*

/* The animation code */
@keyframes example {
  0%   {background-color: red;}
  25%  {background-color: yellow;}
  50%  {background-color: blue;}
  100% {background-color: green;}
}

/* The element to apply the animation to */
div {
  width: 100px;
  height: 100px;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
}

```

* The following example will change both the background-color and the position of the `<div>` element when the animation is 25% complete, 50% complete, and again when the animation is 100% complete:

``` *Example:**

/* The animation code */
@keyframes example {
  0%   {background-color:red; left:0px; top:0px;}
  25%  {background-color:yellow; left:200px; top:0px;}
  50%  {background-color:blue; left:200px; top:200px;}
  75%  {background-color:green; left:0px; top:200px;}
  100% {background-color:red; left:0px; top:0px;}
}

/* The element to apply the animation to */
div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
}

```

---

* **Delay an Animation:**

The `animation-delay` property specifies a delay for the start of an animation.

The following example has a 2 seconds delay before starting the animation:

``` *Example:*

div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-delay: 2s;
}

```

* Negative values are also allowed. If using negative values, the animation will start as if it had already been playing for N seconds.

In the following example, the animation will start as if it had already been playing for 2 seconds:

``` *Example:*
div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-delay: -2s;
}

```

---

* **Set How Many Times an Animation Should Run:**

The `animation-iteration-count` property specifies the number of times an animation should run.

The following example will run the animation 3 times before it stops:

``` *Example:*

div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-iteration-count: 3;
}

```

* The following example uses the value "infinite" to make the animation continue for ever:

``` *Example:*

div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-iteration-count: infinite;
}

```

---

* **Run Animation in Reverse Direction or Alternate Cycles:**

The `animation-direction` property specifies whether an animation should be played forwards, backwards or in alternate cycles.

The animation-direction property can have the following values:

> `normal` - The animation is played as normal (forwards). This is default
> `reverse` - The animation is played in reverse direction (backwards)
> `alternate` - The animation is played forwards first, then backwards
> `alternate-reverse` - The animation is played backwards first, then forwards

The following example will run the animation in reverse direction (backwards):

``` *Example:*

div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-direction: reverse;
}

```

* The following example uses the value "alternate" to make the animation run forwards first, then backwards:

``` *Example:*

div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-iteration-count: 2;
  animation-direction: alternate;
}

```

* The following example uses the value "alternate-reverse" to make the animation run backwards first, then forwards:

``` *Example:*

div {
  width: 100px;
  height: 100px;
  position: relative;
  background-color: red;
  animation-name: example;
  animation-duration: 4s;
  animation-iteration-count: 2;
  animation-direction: alternate-reverse;
}

```

* **Specify the Speed Curve of the Animation:**

The animation-timing-function property specifies the speed curve of the animation.

The animation-timing-function property can have the following values:

> `ease` - Specifies an animation with a slow start, then fast, then end slowly (this is default)
> `linear` - Specifies an animation with the same speed from start to end
> `ease-in` - Specifies an animation with a slow start
> `ease-out` - Specifies an animation with a slow end
> `ease-in-out` - Specifies an animation with a slow start and end
> `cubic-bezier(n,n,n,n)` - Lets you define your own values in a cubic-bezier function

The following example shows some of the different speed curves that can be used:

``` *Example:*

#div1 {animation-timing-function: linear;}
#div2 {animation-timing-function: ease;}
#div3 {animation-timing-function: ease-in;}
#div4 {animation-timing-function: ease-out;}
#div5 {animation-timing-function: ease-in-out;}

```

---

* **Specify the fill-mode For an Animation:**

CSS animations do not affect an element before the first keyframe is played or after the last keyframe is played. The animation-fill-mode property can override this behavior.

The `animation-fill-mode` property specifies a style for the target element when the animation is not playing (before it starts, after it ends, or both).

The animation-fill-mode property can have the following values:

> `none` - Default value. Animation will not apply any styles to the element before or after it is executing
> `forwards` - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation`-iteration-count)
>`backwards`- The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
>`both`- The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions
The following example lets the`<div>` element retain the style values from the last keyframe when the animation ends:

``` *Example:*

div {
  width: 100px;
  height: 100px;
  background: red;
  position: relative;
  animation-name: example;
  animation-duration: 3s;
  animation-fill-mode: forwards;
}

```

* The following example lets the `<div>` element get the style values set by the first keyframe before the animation starts (during the animation-delay period):

``` *Example:*

div {
  width: 100px;
  height: 100px;
  background: red;
  position: relative;
  animation-name: example;
  animation-duration: 3s;
  animation-delay: 2s;
  animation-fill-mode: backwards;
}

```

* The following example lets the `<div>  element get the style values set by the first keyframe before the animation starts, and retain the style values from the last keyframe when the animation ends:

``` *Example:*

div {
  width: 100px;
  height: 100px;
  background: red;
  position: relative;
  animation-name: example;
  animation-duration: 3s;
  animation-delay: 2s;
  animation-fill-mode: both;
}

```

---

* **Animation Shorthand Property:**

The example below uses six of the animation properties:

``` *Example:*

div {
  animation-name: example;
  animation-duration: 5s;
  animation-timing-function: linear;
  animation-delay: 2s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}

```

* The same animation effect as above can be achieved by using the shorthand `animation` property:

``` *Example:*

div {
  animation: example 5s linear 2s infinite alternate;
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_animations.asp')**

---

33. *Tool Tips:*

* **Basic Tooltip:**

Create a tooltip that appears when the user moves the mouse over an element:

``` *Example:*

<style>
/* Tooltip container */
.tooltip {
  position: relative;
  display: inline-block;
  border-bottom: 1px dotted black; /* If you want dots under the hoverable text */
}

/* Tooltip text */
.tooltip .tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: black;
  color: #fff;
  text-align: center;
  padding: 5px 0;
  border-radius: 6px;

  /* Position the tooltip text - see examples below! */
  position: absolute;
  z-index: 1;
}

/* Show the tooltip text when you mouse over the tooltip container */
.tooltip:hover .tooltiptext {
  visibility: visible;
}
</style>

<div class="tooltip">Hover over me
  <span class="tooltiptext">Tooltip text</span>
</div>

```

---

**Example Explained:**

> **HTML:** Use a container element (like `<div>`) and add the `"tooltip"` class to it. When the user mouse over this `<div>`, it will show the tooltip text.

The tooltip text is placed inside an inline element (like `<span>`) with `class="tooltiptext"`.

> **CSS:** The `tooltip` class use `position:relative`, which is needed to position the tooltip text (`position:absolute`).

**Note:** See examples below on how to position the tooltip.

The tooltiptext class holds the actual tooltip text. It is hidden by default, and will be visible on hover (see below). We have also added some basic styles to it: 120px width, black background color, white text color, centered text, and 5px top and bottom padding.

The CSS `border-radius` property is used to add rounded corners to the tooltip text.

The `:hover` selector is used to show the tooltip text when the user moves the mouse over the `<div>` with `class="tooltip"`.

---

* **Tooltip Arrows:**

To create an arrow that should appear from a specific side of the tooltip, add "empty" content after tooltip, with the pseudo-element class `::after` together with the `content` property. The arrow itself is created using borders. This will make the tooltip look like a speech bubble.

This example demonstrates how to add an arrow to the bottom of the tooltip:

``` *Bottom Arrow:*

.tooltip .tooltiptext::after {
  content: " ";
  position: absolute;
  top: 100%; /* At the bottom of the tooltip */
  left: 50%;
  margin-left: -5px;
  border-width: 5px;
  border-style: solid;
  border-color: black transparent transparent transparent;
}

```

**Example Explained:**

Position the arrow inside the tooltip: `top: 100%` will place the arrow at the bottom of the tooltip. `left: 50%` will center the arrow.

**Note:** The `border-width` property specifies the size of the arrow. If you change this, also change the `margin-left` value to the same. This will keep the arrow centered.

The `border-color` is used to transform the content into an arrow. We set the top border to black, and the rest to transparent. If all sides were black, you would end up with a black square box.

---

* **Fade In Tooltips (Animation):**

If you want to fade in the tooltip text when it is about to be visible, you can use the CSS `transition` property together with the `opacity` property, and go from being completely invisible to 100% visible, in a number of specified seconds (1 second in our example):

``` *Example:*

.tooltip .tooltiptext {
  opacity: 0;
  transition: opacity 1s;
}

.tooltip:hover .tooltiptext {
  opacity: 1;
}

```

For More **[Reference]('https://www.w3schools.com/css/css_tooltip.asp')**

---

34. *CSS Image Reflections:*

* The `box-reflect` property is used to create an image reflection.

The value of the `box-reflect` property can be: `below`, `above`, `left` , or `right`.

``` *Example:*

Here we want the reflection below the image:

img {
  -webkit-box-reflect: below;
}

```

``` *Example:*

Here we want the reflection below the image:

img {
  -webkit-box-reflect: right;
}

```

---

* **CSS Reflection Offset:**

To specify the gap between the image and the reflection, add the size of the gap to the `box-reflect` property.

``` *Example:*

Here we want the reflection below the image, with a 20px offset:

img {
  -webkit-box-reflect: below 20px;
}

```

---

* **CSS Reflection With Gradient:**

We can also create a fade-out effect on the reflection.

``` *Example:*

Create a fade-out effect on the reflection:

img {
  -webkit-box-reflect: below 0px linear-gradient(to bottom, rgba(0,0,0,0.0), rgba(0,0,0,0.4));
}

```

---

35. *The CSS object-fit Property:*

* The CSS `object-fit` property is used to specify how an `<img>` or `<video>` should be resized to fit its container.

This property tells the content to fill the container in a variety of ways; such as "preserve that aspect ratio" or "stretch up and take up as much space as possible".

Here is where the `object-fit` property comes in. The `object-fit` property can take one of the following values:

> `fill` - This is default. The image is resized to fill the given dimension. If necessary, the image will be stretched or squished to fit
> `contain` - The image keeps its aspect ratio, but is resized to fit within the given dimension.
> `cover` - The image keeps its aspect ratio and fills the given dimension. The image will be clipped to fit.
> `none` - The image is not resized.
> `scale-down` - the image is scaled down to the smallest version of `none` or `contain`.

For More **[Reference]('https://www.w3schools.com/css/css3_object-fit.asp')**

---

36. *Using the object-position Property:*

* Let's say that the part of the image that is shown, is not positioned as we want. To position the image, we will use the object-position property.

Here we will use the object-position property to position the image so that the great old building is in center:

``` *Example:*

img {
  width: 200px;
  height: 300px;
  object-fit: cover;
  object-position: 80% 100%;
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_object-position.asp')**

---

37. *User Interface:*

In this chapter you will learn about the following CSS user interface properties:

> `resize`
> `outline-offset`

* **CSS Resizing:**

The `resize` property specifies if (and how) an element should be resizable by the user.

``` *Example:*

div {
  resize: horizontal;
  overflow: auto;
}

```

* The following example lets the user resize only the height of a `<div>` element:

``` *Example:*

div {
  resize: vertical;
  overflow: auto;
}

```

* The following example lets the user resize both the height and width of a `<div>` element:

``` *Example:*

div {
  resize: both;
  overflow: auto;
}

```

* In many browsers, `<textarea>` is resizable by default. Here, we have used the resize property to disable the resizability:

``` *Example:*

textarea {
  resize: none;
}

```

---

* **CSS Outline Offset:**

The `outline-offset` property adds space between an outline and the edge or border of an element.

**Note:** `Outline differs from borders! Unlike border, the outline is drawn outside the element's border, and may overlap other content. Also, the outline is NOT a part of the element's dimensions; the element's total width and height is not affected by the width of the outline.`

The following example uses the `outline-offset` property to add space between the border and the outline:

``` *Example:*

div.ex1 {
  margin: 20px;
  border: 1px solid black;
  outline: 4px solid red;
  outline-offset: 15px;
}

div.ex2 {
  margin: 10px;
  border: 1px solid black;
  outline: 5px dashed blue;
  outline-offset: 5px;
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_user_interface.asp')**

38. *Variables:*

* The `var()` function is used to insert the value of a CSS variable.

CSS variables have access to the DOM, which means that you can create variables with local or global scope, change the variables with JavaScript, and change the variables based on media queries.

A good way to use CSS variables is when it comes to the colors of your design. Instead of copy and paste the same colors over and over again, you can place them in variables.

---

* **The Traditional Way:**

The following example shows the traditional way of defining some colors in a style sheet (by defining the colors to use, for each specific element):

``` *Example:**

body { background-color: #1e90ff; }

h2 { border-bottom: 2px solid #1e90ff; }

.container {
  color: #1e90ff;
  background-color: #ffffff;
  padding: 15px;
}

button {
  background-color: #ffffff;
  color: #1e90ff;
  border: 1px solid #1e90ff;
  padding: 5px;
}

```

---

* **Syntax of the var() Function:**

The `var()` function is used to insert the value of a CSS variable.

The syntax of the `var()` function is as follows:

`var(name, value)`

| Value | Description                                              |
| ----- | -------------------------------------------------------- |
| name  | Required. The variable name (must start with two dashes) |
| value | The fallback value (used if the variable is not found)   |

**Note:** The variable name must begin with two dashes (--) and it is case sensitive!

---

* **How var() Works:**

* First of all: CSS variables can have a global or local scope.

Global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared.

To create a variable with global scope, declare it inside the `:root` selector. The `:root` selector matches the document's root element.

To create a variable with local scope, declare it inside the selector that is going to use it.

The following example is equal to the example above, but here we use the `var()` function.

First, we declare two global variables (--blue and --white). Then, we use the `var()` function to insert the value of the variables later in the style sheet:

``` *Example:*

:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

body { background-color: var(--blue); }

h2 { border-bottom: 2px solid var(--blue); }

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
}

button {
  background-color: var(--white);
  color: var(--blue);
  border: 1px solid var(--blue);
  padding: 5px;
}

```

---

* **Advantages of using var() are:**

> makes the code easier to read (more understandable)
> makes it much easier to change the color values

To change the blue and white color to a softer blue and white, you just need to change the two variable values:

``` *Example:*

:root {
  --blue: #6495ed;
  --white: #faf0e6;
}

body { background-color: var(--blue); }

h2 { border-bottom: 2px solid var(--blue); }

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
}

button {
  background-color: var(--white);
  color: var(--blue);
  border: 1px solid var(--blue);
  padding: 5px;
}

```

---

* **CSS var() Function:**

| Property | Description                         |
| -------- | ----------------------------------- |
| var()    | Inserts the value of a CSS variable |

---

* ###CSS Overriding Variables:

* **Overriding Global Variables With Local Variables:**

From the previous page we have learned that global variables can be accessed/used through the entire document, while local variables can be used only inside the selector where it is declared.

Look at the example from the previous page:

``` *Example:*

:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

body {
  background-color: var(--blue);
}

h2 {
  border-bottom: 2px solid var(--blue);
}

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
}

button {
  background-color: var(--white);
  color: var(--blue);
  border: 1px solid var(--blue);
  padding: 5px;
}

```

* **Sometimes we want the variables to change only in a specific section of the page.**

Assume we want a different color of blue for button elements. Then, we can re-declare the `--blue` variable inside the button selector. When we use `var(--blue)` inside this selector, it will use the local `--blue` variable value declared here.

We see that the local --blue variable will override the global --blue variable for the button elements:

``` *Example:*

:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

body {
  background-color: var(--blue);
}

h2 {
  border-bottom: 2px solid var(--blue);
}

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
}

button {
  --blue: #0000ff;
  background-color: var(--white);
  color: var(--blue);
  border: 1px solid var(--blue);
  padding: 5px;
}

```

---

* **Add a New Local Variable:**

If a variable is to be used only one single place, we could also have declared a new local variable, like this:

``` *Example:**

:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

body {
  background-color: var(--blue);
}

h2 {
  border-bottom: 2px solid var(--blue);
}

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
}

button {
  --button-blue: #0000ff;
  background-color: var(--white);
  color: var(--button-blue);
  border: 1px solid var(--button-blue);
  padding: 5px;
}

```

---

* ##CSS Using Variables in Media Queries:

* **Using Variables in Media Queries:**

Now we want to change a variable value inside a media query.

**Tip:** `Media Queries are about defining different style rules for different devices (screens, tablets, mobile phones, etc.). You can learn more Media Queries in our Media Queries Chapter.`

Here, we first declare a new local variable named `--fontsize` for the `.container`class. We set its value to 25 pixels. Then we use it in the `.container` class further down. Then, we create a `@media` rule that says "When the browser's width is 450px or wider, change the `--fontsize` variable value of the `.container` class to 50px."

Here is the complete example:

``` *Example:*

/* Variable declarations */
:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

.container {
  --fontsize: 25px;
}

/* Styles */
body {
  background-color: var(--blue);
}

h2 {
  border-bottom: 2px solid var(--blue);
}

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
  font-size: var(--fontsize);
}

@media screen and (min-width: 450px) {
  .container {
    --fontsize: 50px;
  }
}

```

---

* Here is another example where we also change the value of the --blue variable in the @media rule:

``` *Example:*

/* Variable declarations */
:root {
  --blue: #1e90ff;
  --white: #ffffff;
}

.container {
  --fontsize: 25px;
}

/* Styles */
body {
  background-color: var(--blue);
}

h2 {
  border-bottom: 2px solid var(--blue);
}

.container {
  color: var(--blue);
  background-color: var(--white);
  padding: 15px;
  font-size: var(--fontsize);
}

@media screen and (min-width: 450px) {
  .container {
    --fontsize: 50px;
  }
   :root {
    --blue: lightblue;
  }
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_variables.asp')**

---

39. *Flexbox:*

* **CSS Flexbox Layout Module:**

Before the Flexbox Layout module, there were four layout modes:

> Block, for sections in a webpage
> Inline, for text
> Table, for two-dimensional table data
> Positioned, for explicit position of an element

The Flexible Box Layout Module, makes it easier to design flexible responsive layout structure without using float or positioning.

---

* **Flexbox Elements:**

To start using the Flexbox model, you need to first define a flex container.

The element above represents a flex container (the blue area) with three flex items.

``` *Example:*

A flex container with three flex items:

<div class="flex-container">
  <div>1</div>
  <div>2</div>
  <div>3</div>
</div>


```

---

* ##CSS Flex Container:

* **Parent Element (Container):**

Like we specified in the previous chapter, this is a flex container (the blue area) with three flex items:

The flex container becomes flexible by setting the `display` property to `flex`:

``` *Example:*

.flex-container {
  display: flex;
}

```

* The flex container properties are:

> flex-direction
> flex-wrap
> flex-flow
> justify-content
> align-items
> align-content

---

* **The flex-direction Property:**

The ``flex-direction` property defines in which direction the container wants to stack the flex items.

``` *Example:*

The `column` value stacks the flex items vertically (from top to bottom):

.flex-container {
  display: flex;
  flex-direction: column;
}

```

``` *Example:*

The `column-reverse` value stacks the flex items vertically (but from bottom to top):

.flex-container {
  display: flex;
  flex-direction: column-reverse;
}

```

``` *Example:*

The `row` value stacks the flex items horizontally (from left to right):

.flex-container {
  display: flex;
  flex-direction: row;
}

```

``` *Example:*

The `row-reverse` value stacks the flex items horizontally (but from right to left):

.flex-container {
  display: flex;
  flex-direction: row-reverse;
}

```

---

* **The flex-wrap Property:**

The `flex-wrap` property specifies whether the flex items should wrap or not.

The examples below have 12 flex items, to better demonstrate the `flex-wrap` property.

``` *Example:*

The `wrap` value specifies that the flex items will wrap if necessary:

.flex-container {
  display: flex;
  flex-wrap: wrap;
}

```

``` *Example:*

The `nowrap` value specifies that the flex items will not wrap (this is default):

.flex-container {
  display: flex;
  flex-wrap: nowrap;
}

```

``` *Example:*

The `wrap-reverse` value specifies that the flexible items will wrap if necessary, in reverse order:

.flex-container {
  display: flex;
  flex-wrap: wrap-reverse;
}

```

---

* **The flex-flow Property:**

The `flex-flow` property is a shorthand property for setting both the flex-direction and flex-wrap properties.

```Example
.flex-container {
  display: flex;
  flex-flow: row wrap;
}

```

---

* **The justify-content Property:**

The `justify-content` property is used to align the flex items:

``` *Example:*

The `center` value aligns the flex items at the center of the container:

.flex-container {
  display: flex;
  justify-content: center;
}

```

``` *Example:*

The `flex-start` value aligns the flex items at the beginning of the container (this is default):

.flex-container {
  display: flex;
  justify-content: flex-start;
}

```

``` *Example:*

The `flex-end` value aligns the flex items at the end of the container:

.flex-container {
  display: flex;
  justify-content: flex-end;
}

```

``` *Example:*

The `space-around` value displays the flex items with space before, between, and after the lines:

.flex-container {
  display: flex;
  justify-content: space-around;
}

```

``` *Example:*

The `space-between` value displays the flex items with space between the lines:

.flex-container {
  display: flex;
  justify-content: space-between;
}

```

---

* **The align-items Property:**

The align-items property is used to align the flex items.

In these examples we use a 200 pixels high container, to better demonstrate the align-items property.

``` *Example:*

The `center` value aligns the flex items in the middle of the container:

.flex-container {
  display: flex;
  height: 200px;
  align-items: center;
}

```

``` *Example:*
The `flex-start` value aligns the flex items at the top of the container:

.flex-container {
  display: flex;
  height: 200px;
  align-items: flex-start;
}

```

``` *Example:*

The `flex-end` value aligns the flex items at the bottom of the container:

.flex-container {
  display: flex;
  height: 200px;
  align-items: flex-end;
}

```

``` *Example:*

The `stretch` value stretches the flex items to fill the container (this is default):

.flex-container {
  display: flex;
  height: 200px;
  align-items: stretch;
}

```

``` *Example:*

The `baseline` value aligns the flex items such as their baselines aligns:

.flex-container {
  display: flex;
  height: 200px;
  align-items: baseline;
}

```

**Note:** the example uses different font-size to demonstrate that the items gets aligned by the text baseline:

The align-content Property
The align-content property is used to align the flex lines.

In these examples we use a 600 pixels high container, with the flex-wrap property set to wrap, to better demonstrate the align-content property.

Example
The space-between value displays the flex lines with equal space between them:

.flex-container {
  display: flex;
  height: 600px;
  flex-wrap: wrap;
  align-content: space-between;
}

Example
The space-around value displays the flex lines with space before, between, and after them:

.flex-container {
  display: flex;
  height: 600px;
  flex-wrap: wrap;
  align-content: space-around;
}

Example
The stretch value stretches the flex lines to take up the remaining space (this is default):

.flex-container {
  display: flex;
  height: 600px;
  flex-wrap: wrap;
  align-content: stretch;
}

Example
The center value displays display the flex lines in the middle of the container:

.flex-container {
  display: flex;
  height: 600px;
  flex-wrap: wrap;
  align-content: center;
}

Example
The flex-start value displays the flex lines at the start of the container:

.flex-container {
  display: flex;
  height: 600px;
  flex-wrap: wrap;
  align-content: flex-start;
}

Example
The flex-end value displays the flex lines at the end of the container:

.flex-container {
  display: flex;
  height: 600px;
  flex-wrap: wrap;
  align-content: flex-end;
}

Perfect Centering
In the following example we will solve a very common style problem: perfect centering.

SOLUTION: Set both the justify-content and align-items properties to center, and the flex item will be perfectly centered:

Example
.flex-container {
  display: flex;
  height: 300px;
  justify-content: center;
  align-items: center;
}

The CSS Flexbox Container Properties
The following table lists all the CSS Flexbox Container properties:

Property	Description
align-content	Modifies the behavior of the flex-wrap property. It is similar to align-items, but instead of aligning flex items, it aligns flex lines
align-items	Vertically aligns the flex items when the items do not use all available space on the cross-axis
display	Specifies the type of box used for an HTML element
flex-direction	Specifies the direction of the flexible items inside a flex container
flex-flow	A shorthand property for flex-direction and flex-wrap
flex-wrap	Specifies whether the flex items should wrap or not, if there is not enough room for them on one flex line
justify-content	Horizontally aligns the flex items when the items do not use all available space on the main-axis