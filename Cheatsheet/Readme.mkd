# Markdown Cheatsheet for CSS Features

## [Cheatsheet Markdown](https://www.markdownguide.org/cheat-sheet/)

*Ctrl + shift + v* **For Preview*

1. *CSS Background:*

* background-color
* background-image
* background-repeat
* background-attachment
* background-position
* background (shorthand property)
* `background: red no-repeat center center/cover;`

For More **[Reference](https://www.w3schools.com/css/css_background.asp)**

1. *Font and Font Effects:*

* Viewport is the browser window size. 1vw = 1% of viewport width. If the viewport is 50cm wide, 1vw is 0.5cm.

* Google have also enabled different font effects that you can use. First add effect=effectname to the Google API, then add a special class name to the element that is going to use the special effect. The class name always starts with font-effect- and ends with the effectname.

* `<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia&effect=fire">` `font-family: "Sofia", sans-serif;`

* For More effects **[Reference](https://www.w3schools.com/css/css_font_google.asp)**

3. *Text Properties:*

* The vertical-align property sets the vertical alignment of an element.

* The text-transform property is used to specify uppercase and lowercase or capitalize letters in a text.

* The text-indent property is used to specify the indentation of the first line of a text.

* The letter-spacing property is used to specify the space between the characters in a text.

* The line-height property is used to specify the space between lines.

* The word-spacing property is used to specify the space between the words in a text.

* The white-space property specifies how white-space inside an element is handled.

* The text-shadow property adds shadow to text.

* In its simplest use, you only specify the horizontal shadow (2px) and the vertical shadow (2px) and blur (2px).

* `text-shadow: 2px 2px 2px red;`

* For More **[Reference](https://www.w3schools.com/css/css_text.asp)**

4. *CSS Outline:*

* The outline-width property specifies the width of the outline, and can have one of the following values:
thin (typically 1px)
medium (typically 3px)
thick (typically 5px)
A specific size (in px, pt, cm, em, etc)

* outline-style
* outline-color
* outline-width
* outline-offset

* `outline: 5px solid yellow;`

* The outline-offset property adds space between an outline and the edge/border of an element. The space between an element and its outline is transparent.

* `outline-offset: 15px;`

* For More **[Reference](https://www.w3schools.com/css/css_outline.asp)**

5. *Links:*

* In addition, links can be styled differently depending on what state they are in.
* The four links states are:
* a:link - a normal, unvisited link
* a:visited - a link the user has visited
* a:hover - a link when the user mouses over it
* a:active - a link the moment it is clicked

* ``` Some Properties:
      display: inline-block; /*We can add padding with it*/
      display: block; /*See all results*/
      display: inline; /*We can't add padding with it*/
  ```

* Mouse over the words to change the cursor.

> auto
> crosshair
> default
> e-resize
> help
> move
> n-resize
> ne-resize
> nw-resize
> pointer
> progress
> s-resize
> se-resize
> sw-resize
> text
> w-resize
> wait

* **Synatx:** `cursor:auto;`

For More **[Reference](https://www.w3schools.com/css/css_link.asp)**

6. *Lists:*

* The list-style-image property specifies an image as the list item marker.

* `list-style-type: lower-roman;`
* `list-style-type: decimal;`
* `list-style: alpha;`
* When using the shorthand property, the order of the property values are:

list-style-type (if a list-style-image is specified, the value of this property will be displayed if the image for some reason cannot be displayed)
list-style-position (specifies whether the list-item markers should appear inside or outside the content flow)
list-style-image (specifies an image as the list item marker)
If one of the property values above are missing, the default value for the missing property will be inserted, if any.

`list-style: circle inside url('img_marker.png');`

* `ul {
  list-style-image: url('sqpurple.gif');
}`

* For More **[Reference](https://www.w3schools.com/css/css_list.asp)**

7. *Tables:*

* The border-collapse property sets whether the table borders should be collapsed into a single border.

* For zebra-striped tables, use the **nth-child()** selector and add a background-color to all **even** (or **odd**) table rows.

* A responsive table will display a horizontal scroll bar if the screen is too small to display the full content.

* Add a container element (like `<div>`) with overflow-x:auto around the `<table>` element to make it responsive.

* For More **[Reference](https://www.w3schools.com/css/css_table.asp)**

8. *Display:*

* The display property is the most important CSS property for controlling layout.

* The display property specifies if/how an element is displayed.

* Every HTML element has a default display value depending on what type of element it is. The default display value for most elements is block or inline.

* **Block-level Elements:**

* A block-level element always starts on a new line and takes up the full width available (stretches out to the left and right as far as it can).

* Examples of block-level elements:

* `<div>`
* `<h1> - <h6>`
* `<p>`
* `<form>`
* `<header>`
* `<footer>`
* `<section>`

* **Inline Elements:**

* An inline element does not start on a new line and only takes up as much width as necessary.

* `<span>`
* `<a>`
* `<img>`

* **Display: none;**

* display: none; is commonly used with JavaScript to hide and show elements without deleting and recreating them. Take a look at our last example on this page if you want to know how this can be achieved.

* The `<script>` element uses display: none; as default.

* **Hide an Element - display:none or visibility:hidden?**

* Hiding an element can be done by setting the display property to none. The element will be hidden, and the page will be displayed as if the element is not there.
* `visibility:hidden;` also hides an element.
* However, the element will still take up the same space as before. The element will be hidden, but still affect the layout.

* For More **[Reference](https://www.w3schools.com/css/css_display_visibility.asp)**

9. *Max-Width:*

* Setting the width of a block-level element will prevent it from stretching out to the edges of its container. Then, you can set the margins to auto, to horizontally center the element within its container. The element will take up the specified width, and the remaining space will be split equally between the two margins.

 **Note**: The problem with the `<div>` above occurs when the browser window is smaller than the width of the element. The browser then adds a horizontal scrollbar to the page.

* Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a site usable on small devices.

* Using max-width instead, in this situation, will improve the browser's handling of small windows. This is important when making a site usable on small devices.

* For More **[Reference](https://www.w3schools.com/css/css_max-width.asp)**

10. *Position:*

* **`position: sticky;`**

* An element with position: sticky; is positioned based on the user's scroll position.

A sticky element toggles between relative and fixed, depending on the scroll position. It is positioned relative until a given offset position is met in the viewport - then it "sticks" in place (like `position:fixed`).

* **Note:** Internet Explorer does not support sticky positioning. Safari requires a **-webkit- prefix** (see example below). You must also specify at least one of top, right, bottom or left for sticky positioning to work.

* `div.sticky {
  position: -webkit-sticky; /* Safari */
  position: sticky;
  top: 0;
  background-color: green;
  border: 2px solid #4CAF50;
}`

* **Overlapping Elements:**

* When elements are positioned, they can overlap other elements.

* The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).

* An element can have a positive or negative stack order.

* `img {
  position: absolute;
  left: 0px;
  top: 0px;
  z-index: -1;
}`

* For More **[Reference](https://www.w3schools.com/css/css_positioning.asp)**

11. *Overflow:*

* The overflow property specifies whether to clip the content or to add scrollbars when the content of an element is too big to fit in the specified area.

The overflow property has the following values:

**visible** - Default. The overflow is not clipped. The content renders outside the element's box. (**default**)
**hidden** - The overflow is clipped, and the rest of the content will be invisible.
**scroll** - The overflow is clipped, and a scrollbar is added to see the rest of the content.
**auto** - Similar to scroll, but it adds scrollbars only when necessary.

* **overflow-x and overflow-y**

* The overflow-x and overflow-y properties specifies whether to change the overflow of content just **horizontally** or **vertically** (or **both**):
overflow-x specifies what to do with the **left/right** edges of the content.
overflow-y specifies what to do with the **top/bottom** edges of the content.

* For More **[Reference](https://www.w3schools.com/css/css_overflow.asp)**

12. *Align:*

* **Center Vertically - Using line-height:**

* Another trick is to use the line-height property with a value that is equal to the height property.

``` *With Line-height:*
.center {
  line-height: 200px;
  height: 200px;
  border: 3px solid green;
  text-align: center;
}

/*If the text has multiple lines, add the following:*/

.center p {
  line-height: 1.5;
  display: inline-block;
  vertical-align: middle;
}
```

``` *With Posistion:*
.center p {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
```

``` *With Flex:*
.center p {
  margin: 0;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
```

* For More **[Reference](https://www.w3schools.com/css/css_align.asp)**

13. *Combinators:*

* A CSS selector can contain more than one simple selector. Between the simple selectors, we can include a combinator.

There are four different combinators in CSS:

* descendant selector **(space)**
* child selector **(>)**
* adjacent sibling selector **(+)**
* general sibling selector **(~)**

**Descendant Selector:**

The descendant selector matches all elements that are descendants of a specified element.

``` *Example:*
div p {
  background-color: yellow;
}
```

**Child Selector (>):**

The child selector selects all elements that are the children of a specified element.

``` *Example:*
div > p {
  background-color: yellow;
}
```

**Adjacent Sibling Selector (+):**

The adjacent sibling selector is used to select an element that is directly after another specific element.

Sibling elements must have the same parent element, and "adjacent" means "immediately following".

``` *Example:*
div + p {
  background-color: yellow;
}
```

**General Sibling Selector (~):**

The general sibling selector selects all elements that are siblings of a specified element.

``` *Example:*
div ~ p {
  background-color: yellow;
}
```

* For More **[Reference](https://www.w3schools.com/css/css_combinators.asp)**

14. *Psudeo Class:*

* **What are Pseudo-classes?**

A pseudo-class is used to define a special state of an element.

For example, it can be used to:

* Style an element when a user mouses over it.
* Style visited and unvisited links differently.
* Style an element when it gets focus.

``` *Syntax:*
selector:pseudo-class {
  property: value;
}
```

* **Anchor Pseudo-classes:**

``` *Exmaple:*
a:link {
  color: #FF0000;
}

/* visited link */
a:visited {
  color: #00FF00;
}

/* mouse over link */
a:hover {
  color: #FF00FF;
}

/* selected link */
a:active {
  color: #0000FF;
}
```

**Note:** `a:hover` MUST come after a:link and a:visited in the CSS definition in order to be effective! `a:active` MUST come after `a:hover` in the CSS definition in order to be effective! Pseudo-class names are not case-sensitive.

* **Pseudo-classes and CSS Classes:**

Pseudo-classes can be combined with CSS classes.

``` *Syntax:*
a.highlight:hover {
  color: #ff0000;
}
```

* **Hover on `<div>`:**

An example of using the :hover pseudo-class on a `<div>` element.

``` *Example:*
div:hover {
  background-color: blue;
}
```

* **Simple Tooltip Hover:**

Hover over a `<div>` element to show a `<p>` element *(like a tooltip).*

``` *Syntax:*
p {
  display: none;
  background-color: yellow;
  padding: 20px;
}

div:hover p {
  display: block;
}
```

* **CSS - The :first-child Pseudo-class:**

The `:first-child` pseudo-class matches a specified element that is the first child of another element.

* **Match the first `<p>` element**

``` *Example:
p:first-child {
  color: blue;
}
```

* **Match the first `<i>` element in all `<p>` elements:**

``` *Example:*
p i:first-child {
  color: blue;
}
```

* **Match all `<i>` elements in all first child `<p>` elements:**

``` *Exmaple:*
p:first-child i {
  color: blue;
}
```

* **The :lang Pseudo-class:**

The :lang pseudo-class allows you to define special rules for different languages.

`:lang` defines the quotation marks for `<q>` elements with lang="no".

``` *Exmaple:*
<html>
<head>
<style>
q:lang(no) {
  quotes: "~" "~";
}
</style>
</head>
<body>

<p>Some text <q lang="no">A quote in a paragraph</q> Some text.</p>

</body>
</html>
```

[Specific Reference]('https://www.w3schools.com/css/tryit.asp?filename=trycss_lang')

* **`:focus`:**

The background color of `<input>` elements that are in focus *(clicked or active).*

 ``` *Example:*
input:focus {
  background-color: lightblue;
}
 ```

* For More **[Reference](https://www.w3schools.com/css/css_pseudo_classes.asp)**

 15. *Pseudo-elements:*

* **What are Pseudo-Elements?**

A CSS pseudo-element is used to style specified parts of an element.

For example, it can be used to:

Style the first letter, or line, of an element
Insert content before, or after, the content of an element

``` *Syntax:*
selector::pseudo-element {
  property: value;
}
```

* **The `::first-line` Pseudo-element:**

The ::first-line pseudo-element is used to add a special style to the first line of a text.

``` *Exmaple:*
p::first-line {
  color: #ff0000;
  font-variant: small-caps;
}
```

**Note:** The `::first-line` pseudo-element can only be applied to block-level elements.

The following properties apply to the `::first-line` pseudo-element:

> font properties
> color properties
> background properties
> word-spacing
> letter-spacing
> text-decoration
> vertical-align
> text-transform
> line-height
> clear

**Notice the double colon notation -** `::first-line` versus `:first-line`

The double colon replaced the single-colon notation for pseudo-elements in CSS3. This was an attempt from W3C to distinguish between pseudo-classes and pseudo-elements.

The single-colon syntax was used for both pseudo-classes and pseudo-elements in CSS2 and CSS1.

For backward compatibility, the single-colon syntax is acceptable for CSS2 and CSS1 pseudo-elements.

* **The `::first-letter` Pseudo-element:**

The `::first-letter` pseudo-element is used to add a special style to the first letter of a text.

``` *Exmaple:*
p::first-letter {
  color: #ff0000;
  font-size: xx-large;
}
```

**Note:** The ::first-letter pseudo-element can only be applied to block-level elements.

The following properties apply to the ::first-letter pseudo- element:

> font properties
> color properties
> background properties
> margin properties
> padding properties
> border properties
> text-decoration
> vertical-align (only if "float" is "none")
> text-transform
> line-height
> float
> clear

* **Pseudo-elements and CSS Classes:**

Pseudo-elements can be combined with CSS classes.

``` *Example:*
p.intro::first-letter {
  color: #ff0000;
  font-size: 200%;
}
```

* **Multiple Pseudo-elements:**

Several pseudo-elements can also be combined.

In the following example, the first letter of a paragraph will be red, in an xx-large font size. The rest of the first line will be blue, and in small-caps. The rest of the paragraph will be the default font size and color.

``` *Example:*
p::first-letter {
  color: #ff0000;
  font-size: xx-large;
}

p::first-line {
  color: #0000ff;
  font-variant: small-caps;
}
```

* **CSS - The `::before` Pseudo-element:**

The `::before` pseudo-element can be used to insert some content before the content of an element.

``` *Exmaple:*
h1::before {
  content: url(smiley.gif);
}
```

* **CSS - The `::after` Pseudo-element:**

The `::after` pseudo-element can be used to insert some content after the content of an element.

``` *Exmaple:*
h1::after {
  content: url(smiley.gif);
}
```

* **CSS - The `::marker` Pseudo-element:**

The `::marker` pseudo-element selects the markers of list items.

``` *Exmaple:*
::marker {
  color: red;
  font-size: 23px;
}
```

* **CSS - The `::selection` Pseudo-element:**

The `::selection` pseudo-element matches the portion of an element that is selected by a user.

The following CSS properties can be applied to `::selection`: color, background, cursor, and outline.

``` *Example:
::selection {
  color: red;
  background: yellow;
}
```

* For More **[Reference](https://www.w3schools.com/css/css_pseudo_elements.asp)**

16. *Opacity/Transparency:*

* The opacity property specifies the opacity/transparency of an element.

* **Transparent Image:**
The opacity property can take a value from `0.0 - 1.0`. The lower value, the more transparent.

``` *Example:*
img {
  opacity: 0.5;
}
```

* For More **[Reference](https://www.w3schools.com/css/css_image_transparency.asp)**

17. *Dropdowns:*

* Create a hoverable dropdown with CSS.

* **Basic Dropdown:**

Create a dropdown box that appears when the user moves the mouse over an element.

``` *Exmaple:*
<style>
.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  padding: 12px 16px;
  z-index: 1;
}

.dropdown:hover .dropdown-content {
  display: block;
}
</style>

<div class="dropdown">
  <span>Mouse over me</span>
  <div class="dropdown-content">
    <p>Hello World!</p>
  </div>
</div>
```

* **Dropdown Menu:**

* Create a dropdown menu that allows the user to choose an option from a list.

``` *Exmaple:*
<style>
/* Style The Dropdown Button */
.dropbtn {
  background-color: #4CAF50;
  color: white;
  padding: 16px;
  font-size: 16px;
  border: none;
  cursor: pointer;
}

/* The container <div> - needed to position the dropdown content */
.dropdown {
  position: relative;
  display: inline-block;
}

/* Dropdown Content (Hidden by Default) */
.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

/* Links inside the dropdown */
.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

/* Change color of dropdown links on hover */
.dropdown-content a:hover {background-color: #f1f1f1}

/* Show the dropdown menu on hover */
.dropdown:hover .dropdown-content {
  display: block;
}

/* Change the background color of the dropdown button when the dropdown content is shown */
.dropdown:hover .dropbtn {
  background-color: #3e8e41;
}
</style>

<div class="dropdown">
  <button class="dropbtn">Dropdown</button>
  <div class="dropdown-content">
    <a href="#">Link 1</a>
    <a href="#">Link 2</a>
    <a href="#">Link 3</a>
  </div>
</div>
```

For More **[Reference]('https://www.w3schools.com/css/css_dropdowns.asp')**

18. *Attribute Selectors:*

* **Style HTML Elements With Specific Attributes:**

It is possible to style HTML elements that have specific attributes or attribute values.

* **CSS `[attribute]` Selector:**

The `[attribute]` selector is used to select elements with a specified attribute.

``` *The following example selects all <a> elements with a target attribute:*
a[target] {
  background-color: yellow;
}
```

* **CSS `[attribute="value"]` Selector:**

The `[attribute="value"]` selector is used to select elements with a specified attribute and value.

``` *The following example selects all <a> elements with a target="_blank" attribute:*
a[target="_blank"] {
  background-color: yellow;
}

```

* **CSS `[attribute~="value"]` Selector:**

The `[attribute~="value"]` selector is used to select elements with an attribute value containing a specified word.

``` *The following example selects all elements with a title attribute that contains a space-separated list of words, one of which is "flower":*
[title~="flower"] {
  border: 5px solid yellow;
}
```

* **CSS `[attribute|="value"]` Selector:**

The `[attribute|="value"]` selector is used to select elements with the specified attribute starting with the specified value.

``` *The following example selects all elements with a class attribute value that begins with "top":*
[class|="top"] {
  background: yellow;
}
```

**Note:** The value has to be a whole word, either alone, like `class="top"`, or followed by a hyphen`( - )`, like `class="top-text"`!

* **CSS `[attribute^="value"]` Selector:**

The `[attribute^="value"]` selector is used to select elements whose attribute value begins with a specified value.

``` *The following example selects all elements with a class attribute value that begins with "top":*
[class^="top"] {
  background: yellow;
}
```

**Note:** The value does not have to be a whole word!

* **CSS `[attribute$="value"]` Selector:**

The `[attribute$="value"]` selector is used to select elements whose attribute value ends with a specified value.

``` *The following example selects all elements with a class attribute value that ends with "test":*
[class$="test"] {
  background: yellow;
}
```

**Note:** The value does not have to be a whole word!

* **CSS `[attribute*="value"]` Selector:**

The `[attribute*="value"]` selector is used to select elements whose attribute value contains a specified value.

``` *The following example selects all elements with a class attribute value that contains "te":*
[class*="te"] {
  background: yellow;
}
```

**Note:** The value does not have to be a whole word!

For More **[Reference]('https://www.w3schools.com/css/css_attribute_selectors.asp')**

19. *Counters:*

* CSS counters are `"variables"` maintained by CSS whose values can be incremented by CSS rules `(to track how many times they are used)`. Counters let you adjust the appearance of content based on its placement in the document.

* **Automatic Numbering With Counters:**

CSS counters are like "variables". The variable values can be incremented by CSS rules (which will track how many times they are used).

To work with CSS counters we will use the following properties:

> `counter-reset` - Creates or resets a counter
> `counter-increment` - Increments a counter value
> `content` - Inserts generated content
> `counter()` or `counters()` function - Adds the value of a counter to an element

To use a CSS counter, it must first be created with counter-reset.

``` *The following example creates a counter for the page (in the body selector), then increments the counter value for each <h2> element and adds "Section <value of the counter>:" to the beginning of each <h2> element:*

body {
  counter-reset: section;
}

h2::before {
  counter-increment: section;
  content: "Section " counter(section) ": ";
}
```

* **Nesting Counters:**
The following example creates one counter for the page `(section)` and one counter for each `<h1>` element `(subsection)`. The `"section"` counter will be counted for each `<h1>` element with "Section `<value of the section counter>."`, and the "subsection" counter will be counted for each `<h2>` element with `"<value of the section counter>.<value of the subsection counter>"`:

``` *Exmaple:*

body {
  counter-reset: section;
}

h1 {
  counter-reset: subsection;
}

h1::before {
  counter-increment: section;
  content: "Section " counter(section) ". ";
}

h2::before {
  counter-increment: subsection;
  content: counter(section) "." counter(subsection) " ";
}
```

* A counter can also be useful to make outlined lists because a new instance of a counter is automatically created in child elements. Here we use the `counters()` function to insert a string between different levels of nested counters:

``` *Example:*

ol {
  counter-reset: section;
  list-style-type: none;
}

li::before {
  counter-increment: section;
  content: counters(section,".") " ";
}
```

For More **[Reference](https://www.w3schools.com/css/css_counters.asp)**

20. *Website Layout:*

* A website is often divided into headers, menus, content and a footer.

* **Header:**

A header is usually located at the top of the website `(or right below a top navigation menu)`. It often contains a logo or the website name:

``` Example:

.header {
  background-color: #F1F1F1;
  text-align: center;
  padding: 20px;
}
```

* **Navigation Bar:**

A navigation bar contains a list of links to help visitors navigating through your website:

``` Example:

/* The navbar container */
.topnav {
  overflow: hidden;
  background-color: #333;
}

/* Navbar links */
.topnav a {
  float: left;
  display: block;
  color: #f2f2f2;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
}

/* Links - change color on hover */
.topnav a:hover {
  background-color: #ddd;
  color: black;
}
```

* **Content:**

The layout in this section, often depends on the target users. The most common layout is one (or combining them) of the following:

> 1-column (often used for mobile browsers)
> 2-column (often used for tablets and laptops)
> 3-column layout (only used for desktops)

We will create a 3-column layout, and change it to a 1-column layout on smaller screens:

``` Exmaple:

/* Create three equal columns that floats next to each other */
.column {
  float: left;
  width: 33.33%;
}

/* Clear floats after the columns */
.row:after {
  content: "";
  display: table;
  clear: both;
}

/* Responsive layout - makes the three columns stack on top of each other instead of next to each other on smaller screens (600px wide or less) */
@media screen and (max-width: 600px) {
  .column {
    width: 100%;
  }
}
```

* **Footer:**

The footer is placed at the bottom of your page. It often contains information like copyright and contact info:

``` Example:

.footer {
  background-color: #F1F1F1;
  text-align: center;
  padding: 10px;
}
```

For More **[Reference](https://www.w3schools.com/css/css_website_layout.asp)**

21. *Units:*

* **CSS Units:**

CSS has several different units for expressing a length.

Many CSS properties take `"length"` `values`, such as `width`, `margin`, `padding`, `font-size`, etc.

Length is a number followed by a `length unit`, such as `10px`, `2em`, etc.

``` Exmaple:

h1 {
  font-size: 60px;
}

p {
  font-size: 25px;
  line-height: 50px;
}

```

**Note:** A whitespace cannot appear between the number and the unit. However, if the value is `0`, the unit can be omitted.

For some CSS properties, negative lengths are allowed.

There are two types of length units: `absolute and relative.`

* **Absolute Lengths:**

The absolute length units are fixed and a length expressed in any of these will appear as exactly that size.

Absolute length units are not recommended for use on screen, because screen sizes vary so much. However, they can be used if the output medium is known, such as for print layout.

| Unit | Description                  |
| ---- | ---------------------------- |
| cm   | centimeter                   |
| mm   | millimeter                   |
| in   | inches (1in = 96px = 2.54cm) |
| px * | pixels (1px = 1/96th of 1in) |
| pt   | points (1pt = 1/72 of 1in)   |
| pc   | picas (1pc = 12 pt)          |

* Pixels `(px)` are relative to the viewing device. For low-dpi devices, 1px is one device pixel `(dot)` of the display. For printers and high resolution screens 1px implies multiple device pixels.

* **Relative Lengths:**

Relative length units specify a length relative to another length property. Relative length units scales better between different rendering mediums.

| Unit | Description                                                                               |
| ---- | ----------------------------------------------------------------------------------------- |
| em   | Relative to the font-size of the element (2em means 2 times the size of the current font) |
| ex   | Relative to the x-height of the current font (rarely used)                                |
| ch   | Relative to width of the "0" (zero)                                                       |
| rem  | Relative to font-size of the root element                                                 |
| vw   | Relative to 1% of the width of the viewport*                                              |
| vh   | Relative to 1% of the height of the viewport*                                             |
| vmin | Relative to 1% of viewport's* smaller dimension                                           |
| vmax | Relative to 1% of viewport's* larger dimension                                            |
| %    | Relative to the parent element                                                            |

For More  **[Reference](https://www.w3schools.com/css/css_units.asp)**

22. *CSS Specificity:*

* **What is Specificity?**

If there are two or more conflicting CSS rules that point to the same element, the browser follows some rules to determine which one is most specific and therefore wins out.

Think of specificity as a score/rank that determines which style declarations are ultimately applied to an element.

The universal selector `(*)` has low specificity, while ID selectors are highly specific!

**Note:** Specificity is a common reason why your CSS-rules don't apply to some elements, although you think they should.

* **Specificity Hierarchy:**

Every selector has its place in the specificity hierarchy. There are four categories which define the specificity level of a selector:

`Inline styles` - An inline style is attached directly to the element to be styled. Example: `<h1 style="color: #ffffff;">`.

`IDs` - An ID is a unique identifier for the page elements, such as #navbar.

`Classes, attributes and pseudo-classes` - This category includes .classes, `[attributes]` and pseudo-classes such as :hover, :focus etc.

`Elements and pseudo-elements` - This category includes element names and pseudo-elements, such as h1, div, :before and :after.

* **How to Calculate Specificity?**

Memorize how to calculate specificity!

Start at 0, add 1000 for style attribute, add 100 for each ID, add 10 for each attribute, class or pseudo-class, add 1 for each element name or pseudo-element.

Consider these three code fragments:

``` *Example:*

A: h1
B: #content h1
C: <div id="content"><h1 style="color: #ffffff">Heading</h1></div>

```

The specificity of A is 1 `(one element)`
The specificity of B is 101 `(one ID reference and one element)`
The specificity of C is 1000 `(inline styling)`

Since 1 < 101 < 1000, the third rule `(C)` has a greater level of specificity, and therefore will be applied.

* **Specificity Rules:**

**Equal specificity: the latest rule counts** - If the same rule is written twice into the external style sheet, then the lower rule in the style sheet is closer to the element to be styled, and therefore will be applied:

``` *Example:*

h1 {background-color: yellow;}
h1 {background-color: red;}

```

*the latter rule is always applied.*

---

* **ID selectors have a higher specificity than attribute selectors** - Look at the following three code lines:

``` *Example:*

div#a {background-color: green;}
#a {background-color: yellow;}
div[id=a] {background-color: blue;}

```

*the first rule is more specific than the other two, and will be applied.*

---

* **Contextual selectors are more specific than a single element selector** - The embedded style sheet is closer to the element to be styled. So in the following situation

``` *Example:*

From external CSS file:
#content h1 {background-color: red;}

In HTML file:
<style>
#content h1 {
  background-color: yellow;
}
</style>

```

*the latter rule will be applied.*

---

* **A class selector beats any number of element selectors** - a class selector such as .intro beats h1, p, div, etc:

``` *Example:*

.intro {background-color: yellow;}
h1 {background-color: red;}

```

**The universal selector and inherited values have a specificity of 0** - *`*`, body `*` and similar have a zero specificity. Inherited values also have a specificity of 0.*

---

23. *CSS Border Images:*

* **CSS Border Images:**

With the CSS `border-image` property, you can set an image to be used as the border around an element.

* *CSS `border-image` Property:*

The CSS `border-image` property allows you to specify an image to be used instead of the normal border around an element.

The property has three parts:

> The image to use as the border
> Where to slice the image
> Define whether the middle sections should be repeated or stretched

We will use the following image `(called "border.png")`:

![border.png](https://demo.tutorialzine.com/2013/10/css3-features-you-can-finally-use/assets/img/border.png)

The `border-image` property takes the image and slices it into nine sections, like a tic-tac-toe board. It then places the corners at the corners, and the middle sections are repeated or stretched as you specify.

**Note:** For `border-image` to work, the element also needs the `border` property set!

Here, the middle sections of the image are repeated to create the border:

``` *Here is the code:*

#borderimg {
  border: 10px solid transparent;
  padding: 15px;
  border-image: url(border.png) 30 round; /* space, stretch, fill, repeat */
}

```

**Tip:** The `border-image` property is actually a shorthand property for the `border-image-source`, `border-image-slice`, `border-image-width`, `border-image-outset` and `border-image-repeat` properties.

| Border Property     | Description                                                                       |
| ------------------- | --------------------------------------------------------------------------------- |
| border-image        | A shorthand property for setting all the `border-image-*` properties              |
| border-image-source | Specifies the path to the image to be used as a border                            |
| border-image-slice  | Specifies how to slice the border image                                           |
| border-image-width  | Specifies the widths of the border image                                          |
| border-image-outset | Specifies the amount by which the border image area extends beyond the border box |
| border-image-repeat | Specifies whether the border image should be repeated, rounded or stretched       |

For More **[Reference]('https://www.w3schools.com/css/css3_border_images.asp')**

24. *Background:*

* **CSS Background Size:**

The CSS `background-size` property allows you to specify the size of background images.

The size can be specified in lengths, percentages, or by using one of the two keywords: `contain` or `cover`.

The following example resizes a background image to much smaller than the original image `(using pixels)`:

``` *Example:*

#div1 {
  background: url(img_flower.jpg);
  background-size: 100px 80px;
  background-repeat: no-repeat;
}

```

The two other possible values for `background-size` are `contain` and `cover`.

The `contain` keyword scales the background image to be as large as possible (but both its width and its height must fit inside the content area). As such, depending on the proportions of the background image and the background positioning area, there may be some areas of the background which are not covered by the background image.

The `cover` keyword scales the background image so that the content area is completely covered by the background image (both its width and height are equal to or exceed the content area). As such, some parts of the background image may not be visible in the background positioning area.

The following example illustrates the use of `contain` and `cover`:

``` *Exmaple:*

#div1 {
  background: url(img_flower.jpg);
  background-size: contain;
  background-repeat: no-repeat;
}

#div2 {
  background: url(img_flower.jpg);
  background-size: cover;
  background-repeat: no-repeat;
}

```

* **CSS background-origin Property:**

The CSS `background-origin` property specifies where the background image is positioned.

The property takes three different values:

> `border-box` - the background image starts from the upper left corner of the border
> `padding-box` - `(default)` the background image starts from the upper left corner of the padding edge
> `content-box` - the background image starts from the upper left corner of the content

The following example illustrates the `background-origin` property:

``` *Exmaple:*

#example1 {
  border: 10px solid black;
  padding: 35px;
  background: url(img_flwr.gif);
  background-repeat: no-repeat;
  background-origin: content-box;
}

```

* **CSS background-clip Property:**

The CSS `background-clip` property specifies the painting area of the background.

The property takes three different values:

> `border-box` - `(default)` the background is painted to the outside edge of the border
> `padding-box` - the background is painted to the outside edge of the padding
> `content-box` - the background is painted within the content box

The following example illustrates the background-clip property:

``` *Example:*

#example1 {
  border: 10px dotted black;
  padding: 35px;
  background: yellow;
  background-clip: content-box;
}

```

For More **[Reference]('https://www.w3schools.com/css/css3_backgrounds.asp')**

25. **CSS Gradients:**

* `CSS gradients` let you display smooth transitions between two or more specified colors.

* CSS defines two types of gradients:

> `Linear Gradients` (goes down/up/left/right/diagonally)
> `Radial Gradients` (defined by their center)

---

* **CSS Linear Gradients:**

To create a linear gradient you must define at least two color stops. Color stops are the colors you want to render smooth transitions among. You can also set a starting point and a direction (or an angle) along with the gradient effect.

`Syntax:`

`background-image: linear-gradient(direction, color-stop1, color-stop2, ...);`

**`Direction - Top to Bottom (this is default):`**

The following example shows a linear gradient that starts at the top. It starts red, transitioning to yellow:

``` *Example:*

#grad {
  background-image: linear-gradient(red, yellow);
}

```

* **`Direction - Left to Right:`**

The following example shows a linear gradient that starts from the left. It starts red, transitioning to yellow:

``` *Example:*

#grad {
  background-image: linear-gradient(to right, red, yellow);
}

```

* **`Direction - Diagonal:`**

You can make a gradient diagonally by specifying both the horizontal and vertical starting positions.

The following example shows a linear gradient that starts at top left (and goes to bottom right). It starts red, transitioning to yellow:

``` *Example:*

#grad {
  background-image: linear-gradient(to bottom right, red, yellow);
}

```

---

* **Using Angles:**

If you want more control over the direction of the gradient, you can define an angle, instead of the predefined directions (to bottom, to top, to right, to left, to bottom right, etc.). A value of 0deg is equivalent to "to top". A value of 90deg is equivalent to "to right". A value of 180deg is equivalent to "to bottom".

`Syntax:`

`background-image: linear-gradient(angle, color-stop1, color-stop2);`

The following example shows how to use angles on linear gradients:

``` *Example:*

#grad {
  background-image: linear-gradient(180deg, red, yellow);
}

```

* **Using Multiple Color Stops:**

The following example shows a linear gradient (from top to bottom) with multiple color stops:

``` *Example:*

#grad {
  background-image: linear-gradient(red, yellow, green);
}

```

* **Rainbow Background:**

The following example shows how to create a linear gradient (from left to right) with the color of the rainbow and some text:

``` *Example:*

#grad {
  background-image: linear-gradient(to right, red, orange, yellow, green, blue, indigo, violet);
}

```

* **Using Transparency:**

CSS gradients also support transparency, which can be used to create fading effects.

To add transparency, we use the rgba() function to define the color stops. The last parameter in the rgba() function can be a value from 0 to 1, and it defines the transparency of the color: 0 indicates full transparency, 1 indicates full color (no transparency).

The following example shows a linear gradient that starts from the left. It starts fully transparent, transitioning to full color red:

``` *Exmaple:*

#grad {
  background-image: linear-gradient(to right, rgba(255,0,0,0), rgba(255,0,0,1));
}

```

* **Repeating a linear-gradient:**

The repeating-linear-gradient() function is used to repeat linear gradients:

``` *Example:*

A repeating linear gradient:

#grad {
  background-image: repeating-linear-gradient(red, yellow 10%, green 20%);
}

```